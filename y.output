Terminaux inutilisés dans la grammaire

   WHILE
   DO
   IF
   ELSE
   RETURN
   CONST_Q
   STRING
   CONST


État 18 conflits: 1 décalage/réduction
État 69 conflits: 1 décalage/réduction
État 70 conflits: 1 décalage/réduction
État 154 conflits: 1 décalage/réduction
État 157 conflits: 1 décalage/réduction
État 167 conflits: 1 décalage/réduction
État 194 conflits: 1 décalage/réduction
État 197 conflits: 1 décalage/réduction


Grammaire

    0 $accept: optimizer_start $end

    1 optimizer_start: optimization1

    2 a: %empty

    3 level_vec: level1
    4          | level2

    5 level1: level1_1
    6       | level1_2

    7 level1_2: vec_swap

    8 vec_swap: type_specifier IDENTIFIER assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER ';'

    9 $@1: %empty

   10 $@2: %empty

   11 level2: a a a a a a a a a a a a a a a FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@2 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}'

   12 level1_1: a a a a a a a a a a a a a a a IDENTIFIER '[' IDENTIFIER ']' assignment_operator optimization1_1 ';'

   13 $@3: %empty

   14 $@4: %empty

   15 $@5: %empty

   16 $@6: %empty

   17 $@7: %empty

   18 optimization1: FOR '(' IDENTIFIER $@3 '=' assignment_expression $@4 ';' IDENTIFIER $@5 comp_op shift_expression $@6 ';' IDENTIFIER $@7 INC ')' '{' level_vec '}'

   19 optimization2_1: IDENTIFIER '[' IDENTIFIER ']' '[' IDENTIFIER ']'
   20                | IDENTIFIER '[' IDENTIFIER ']' '[' IDENTIFIER ']' '*' primary_expression
   21                | primary_expression '*' IDENTIFIER '[' IDENTIFIER ']' '[' IDENTIFIER ']'
   22                | expression

   23 optimization1_1: IDENTIFIER '[' IDENTIFIER ']' '*' primary_expression
   24                | IDENTIFIER '[' IDENTIFIER ']'
   25                | primary_expression '*' IDENTIFIER '[' IDENTIFIER ']'
   26                | optimization1_1 '+' optimization1_1
   27                | assignment_expression

   28 comp_op: LE_OP
   29        | '<'

   30 expression: assignment_expression
   31           | expression ',' assignment_expression

   32 postfix_expression: primary_expression
   33                   | postfix_expression '[' expression ']'
   34                   | postfix_expression '(' ')'
   35                   | postfix_expression INC
   36                   | postfix_expression DEC

   37 unary_expression: postfix_expression
   38                 | INC unary_expression
   39                 | DEC unary_expression

   40 multiplicative_expression: unary_expression
   41                          | multiplicative_expression '*' unary_expression
   42                          | multiplicative_expression '/' unary_expression
   43                          | multiplicative_expression '%' unary_expression

   44 additive_expression: multiplicative_expression
   45                    | additive_expression '+' multiplicative_expression
   46                    | additive_expression '-' multiplicative_expression

   47 shift_expression: additive_expression
   48                 | shift_expression LEFT_OP additive_expression
   49                 | shift_expression RIGHT_OP additive_expression

   50 relational_expression: shift_expression
   51                      | relational_expression '<' shift_expression
   52                      | relational_expression '>' shift_expression
   53                      | relational_expression LE_OP shift_expression
   54                      | relational_expression GE_OP shift_expression

   55 equality_expression: relational_expression
   56                    | equality_expression EQ_OP relational_expression
   57                    | equality_expression NE_OP relational_expression

   58 and_expression: equality_expression
   59               | and_expression '&' equality_expression

   60 exclusive_or_expression: and_expression
   61                        | exclusive_or_expression '^' and_expression

   62 inclusive_or_expression: exclusive_or_expression
   63                        | inclusive_or_expression '|' exclusive_or_expression

   64 logical_and_expression: inclusive_or_expression
   65                       | logical_and_expression AND_OP inclusive_or_expression

   66 logical_or_expression: logical_and_expression
   67                      | logical_or_expression OR_OP logical_and_expression

   68 assignment_expression: logical_or_expression
   69                      | unary_expression assignment_operator assignment_expression

   70 assignment_operator: '='

   71 type_specifier: VOID
   72               | INT
   73               | FLOAT

   74 primary_expression: IDENTIFIER
   75                   | CONST_INT
   76                   | CONST_FLOAT
   77                   | '(' expression ')'


Terminaux, suivis des règles où ils apparaissent

$end (0) 0
'%' (37) 43
'&' (38) 59
'(' (40) 11 18 34 77
')' (41) 11 18 34 77
'*' (42) 20 21 23 25 41
'+' (43) 26 45
',' (44) 31
'-' (45) 46
'/' (47) 42
';' (59) 8 11 12 18
'<' (60) 29 51
'=' (61) 11 18 70
'>' (62) 52
'[' (91) 8 11 12 19 20 21 23 24 25 33
']' (93) 8 11 12 19 20 21 23 24 25 33
'^' (94) 61
'{' (123) 11 18
'|' (124) 63
'}' (125) 11 18
error (256)
INT (258) 72
VOID (259) 71
FLOAT (260) 73
FOR (261) 11 18
WHILE (262)
DO (263)
IF (264)
ELSE (265)
RETURN (266)
CONST_Q (267)
CONST_INT <vv> (268) 75
CONST_FLOAT <vv> (269) 76
IDENTIFIER <vv> (270) 8 11 12 18 19 20 21 23 24 25 74
STRING <vv> (271)
CONST <vv> (272)
AND_OP (273) 65
OR_OP (274) 67
LE_OP (275) 28 53
GE_OP (276) 54
EQ_OP (277) 56
NE_OP (278) 57
INC (279) 11 18 35 38
DEC (280) 36 39
LEFT_OP (281) 48
RIGHT_OP (282) 49


Non-terminaux, suivis des règles où ils apparaissent

$accept (47)
    à gauche: 0
optimizer_start (48)
    à gauche: 1, à droite: 0
a (49)
    à gauche: 2, à droite: 11 12
level_vec (50)
    à gauche: 3 4, à droite: 18
level1 (51)
    à gauche: 5 6, à droite: 3
level1_2 (52)
    à gauche: 7, à droite: 6
vec_swap (53)
    à gauche: 8, à droite: 7
level2 <vv> (54)
    à gauche: 11, à droite: 4
$@1 (55)
    à gauche: 9, à droite: 11
$@2 (56)
    à gauche: 10, à droite: 11
level1_1 (57)
    à gauche: 12, à droite: 5
optimization1 (58)
    à gauche: 18, à droite: 1
$@3 (59)
    à gauche: 13, à droite: 18
$@4 (60)
    à gauche: 14, à droite: 18
$@5 (61)
    à gauche: 15, à droite: 18
$@6 (62)
    à gauche: 16, à droite: 18
$@7 (63)
    à gauche: 17, à droite: 18
optimization2_1 <vv> (64)
    à gauche: 19 20 21 22, à droite: 11
optimization1_1 <vv> (65)
    à gauche: 23 24 25 26 27, à droite: 12 26
comp_op <zz> (66)
    à gauche: 28 29, à droite: 11 18
expression <vv> (67)
    à gauche: 30 31, à droite: 22 31 33 77
postfix_expression <vv> (68)
    à gauche: 32 33 34 35 36, à droite: 33 34 35 36 37
unary_expression <vv> (69)
    à gauche: 37 38 39, à droite: 38 39 40 41 42 43 69
multiplicative_expression <vv> (70)
    à gauche: 40 41 42 43, à droite: 41 42 43 44 45 46
additive_expression <vv> (71)
    à gauche: 44 45 46, à droite: 45 46 47 48 49
shift_expression <vv> (72)
    à gauche: 47 48 49, à droite: 11 18 48 49 50 51 52 53 54
relational_expression <vv> (73)
    à gauche: 50 51 52 53 54, à droite: 51 52 53 54 55 56 57
equality_expression <vv> (74)
    à gauche: 55 56 57, à droite: 56 57 58 59
and_expression <vv> (75)
    à gauche: 58 59, à droite: 59 60 61
exclusive_or_expression <vv> (76)
    à gauche: 60 61, à droite: 61 62 63
inclusive_or_expression <vv> (77)
    à gauche: 62 63, à droite: 63 64 65
logical_and_expression <vv> (78)
    à gauche: 64 65, à droite: 65 66 67
logical_or_expression <vv> (79)
    à gauche: 66 67, à droite: 67 68
assignment_expression <vv> (80)
    à gauche: 68 69, à droite: 11 18 27 30 31 69
assignment_operator <vv> (81)
    à gauche: 70, à droite: 8 11 12 69
type_specifier <vv> (82)
    à gauche: 71 72 73, à droite: 8
primary_expression <vv> (83)
    à gauche: 74 75 76 77, à droite: 20 21 23 25 32


État 0

    0 $accept: . optimizer_start $end

    FOR  décalage et aller à l'état 1

    optimizer_start  aller à l'état 2
    optimization1    aller à l'état 3


État 1

   18 optimization1: FOR . '(' IDENTIFIER $@3 '=' assignment_expression $@4 ';' IDENTIFIER $@5 comp_op shift_expression $@6 ';' IDENTIFIER $@7 INC ')' '{' level_vec '}'

    '('  décalage et aller à l'état 4


État 2

    0 $accept: optimizer_start . $end

    $end  décalage et aller à l'état 5


État 3

    1 optimizer_start: optimization1 .

    $défaut  réduction par utilisation de la règle 1 (optimizer_start)


État 4

   18 optimization1: FOR '(' . IDENTIFIER $@3 '=' assignment_expression $@4 ';' IDENTIFIER $@5 comp_op shift_expression $@6 ';' IDENTIFIER $@7 INC ')' '{' level_vec '}'

    IDENTIFIER  décalage et aller à l'état 6


État 5

    0 $accept: optimizer_start $end .

    $défaut  accepter


État 6

   18 optimization1: FOR '(' IDENTIFIER . $@3 '=' assignment_expression $@4 ';' IDENTIFIER $@5 comp_op shift_expression $@6 ';' IDENTIFIER $@7 INC ')' '{' level_vec '}'

    $défaut  réduction par utilisation de la règle 13 ($@3)

    $@3  aller à l'état 7


État 7

   18 optimization1: FOR '(' IDENTIFIER $@3 . '=' assignment_expression $@4 ';' IDENTIFIER $@5 comp_op shift_expression $@6 ';' IDENTIFIER $@7 INC ')' '{' level_vec '}'

    '='  décalage et aller à l'état 8


État 8

   18 optimization1: FOR '(' IDENTIFIER $@3 '=' . assignment_expression $@4 ';' IDENTIFIER $@5 comp_op shift_expression $@6 ';' IDENTIFIER $@7 INC ')' '{' level_vec '}'

    CONST_INT    décalage et aller à l'état 9
    CONST_FLOAT  décalage et aller à l'état 10
    IDENTIFIER   décalage et aller à l'état 11
    '('          décalage et aller à l'état 12
    INC          décalage et aller à l'état 13
    DEC          décalage et aller à l'état 14

    postfix_expression         aller à l'état 15
    unary_expression           aller à l'état 16
    multiplicative_expression  aller à l'état 17
    additive_expression        aller à l'état 18
    shift_expression           aller à l'état 19
    relational_expression      aller à l'état 20
    equality_expression        aller à l'état 21
    and_expression             aller à l'état 22
    exclusive_or_expression    aller à l'état 23
    inclusive_or_expression    aller à l'état 24
    logical_and_expression     aller à l'état 25
    logical_or_expression      aller à l'état 26
    assignment_expression      aller à l'état 27
    primary_expression         aller à l'état 28


État 9

   75 primary_expression: CONST_INT .

    $défaut  réduction par utilisation de la règle 75 (primary_expression)


État 10

   76 primary_expression: CONST_FLOAT .

    $défaut  réduction par utilisation de la règle 76 (primary_expression)


État 11

   74 primary_expression: IDENTIFIER .

    $défaut  réduction par utilisation de la règle 74 (primary_expression)


État 12

   77 primary_expression: '(' . expression ')'

    CONST_INT    décalage et aller à l'état 9
    CONST_FLOAT  décalage et aller à l'état 10
    IDENTIFIER   décalage et aller à l'état 11
    '('          décalage et aller à l'état 12
    INC          décalage et aller à l'état 13
    DEC          décalage et aller à l'état 14

    expression                 aller à l'état 29
    postfix_expression         aller à l'état 15
    unary_expression           aller à l'état 16
    multiplicative_expression  aller à l'état 17
    additive_expression        aller à l'état 18
    shift_expression           aller à l'état 19
    relational_expression      aller à l'état 20
    equality_expression        aller à l'état 21
    and_expression             aller à l'état 22
    exclusive_or_expression    aller à l'état 23
    inclusive_or_expression    aller à l'état 24
    logical_and_expression     aller à l'état 25
    logical_or_expression      aller à l'état 26
    assignment_expression      aller à l'état 30
    primary_expression         aller à l'état 28


État 13

   38 unary_expression: INC . unary_expression

    CONST_INT    décalage et aller à l'état 9
    CONST_FLOAT  décalage et aller à l'état 10
    IDENTIFIER   décalage et aller à l'état 11
    '('          décalage et aller à l'état 12
    INC          décalage et aller à l'état 13
    DEC          décalage et aller à l'état 14

    postfix_expression  aller à l'état 15
    unary_expression    aller à l'état 31
    primary_expression  aller à l'état 28


État 14

   39 unary_expression: DEC . unary_expression

    CONST_INT    décalage et aller à l'état 9
    CONST_FLOAT  décalage et aller à l'état 10
    IDENTIFIER   décalage et aller à l'état 11
    '('          décalage et aller à l'état 12
    INC          décalage et aller à l'état 13
    DEC          décalage et aller à l'état 14

    postfix_expression  aller à l'état 15
    unary_expression    aller à l'état 32
    primary_expression  aller à l'état 28


État 15

   33 postfix_expression: postfix_expression . '[' expression ']'
   34                   | postfix_expression . '(' ')'
   35                   | postfix_expression . INC
   36                   | postfix_expression . DEC
   37 unary_expression: postfix_expression .

    '('  décalage et aller à l'état 33
    '['  décalage et aller à l'état 34
    INC  décalage et aller à l'état 35
    DEC  décalage et aller à l'état 36

    $défaut  réduction par utilisation de la règle 37 (unary_expression)


État 16

   40 multiplicative_expression: unary_expression .
   69 assignment_expression: unary_expression . assignment_operator assignment_expression

    '='  décalage et aller à l'état 37

    $défaut  réduction par utilisation de la règle 40 (multiplicative_expression)

    assignment_operator  aller à l'état 38


État 17

   41 multiplicative_expression: multiplicative_expression . '*' unary_expression
   42                          | multiplicative_expression . '/' unary_expression
   43                          | multiplicative_expression . '%' unary_expression
   44 additive_expression: multiplicative_expression .

    '/'  décalage et aller à l'état 39
    '*'  décalage et aller à l'état 40
    '%'  décalage et aller à l'état 41

    $défaut  réduction par utilisation de la règle 44 (additive_expression)


État 18

   45 additive_expression: additive_expression . '+' multiplicative_expression
   46                    | additive_expression . '-' multiplicative_expression
   47 shift_expression: additive_expression .

    '+'  décalage et aller à l'état 42
    '-'  décalage et aller à l'état 43

    '+'       [réduction par utilisation de la règle 47 (shift_expression)]
    $défaut  réduction par utilisation de la règle 47 (shift_expression)


État 19

   48 shift_expression: shift_expression . LEFT_OP additive_expression
   49                 | shift_expression . RIGHT_OP additive_expression
   50 relational_expression: shift_expression .

    LEFT_OP   décalage et aller à l'état 44
    RIGHT_OP  décalage et aller à l'état 45

    $défaut  réduction par utilisation de la règle 50 (relational_expression)


État 20

   51 relational_expression: relational_expression . '<' shift_expression
   52                      | relational_expression . '>' shift_expression
   53                      | relational_expression . LE_OP shift_expression
   54                      | relational_expression . GE_OP shift_expression
   55 equality_expression: relational_expression .

    '<'    décalage et aller à l'état 46
    '>'    décalage et aller à l'état 47
    LE_OP  décalage et aller à l'état 48
    GE_OP  décalage et aller à l'état 49

    $défaut  réduction par utilisation de la règle 55 (equality_expression)


État 21

   56 equality_expression: equality_expression . EQ_OP relational_expression
   57                    | equality_expression . NE_OP relational_expression
   58 and_expression: equality_expression .

    EQ_OP  décalage et aller à l'état 50
    NE_OP  décalage et aller à l'état 51

    $défaut  réduction par utilisation de la règle 58 (and_expression)


État 22

   59 and_expression: and_expression . '&' equality_expression
   60 exclusive_or_expression: and_expression .

    '&'  décalage et aller à l'état 52

    $défaut  réduction par utilisation de la règle 60 (exclusive_or_expression)


État 23

   61 exclusive_or_expression: exclusive_or_expression . '^' and_expression
   62 inclusive_or_expression: exclusive_or_expression .

    '^'  décalage et aller à l'état 53

    $défaut  réduction par utilisation de la règle 62 (inclusive_or_expression)


État 24

   63 inclusive_or_expression: inclusive_or_expression . '|' exclusive_or_expression
   64 logical_and_expression: inclusive_or_expression .

    '|'  décalage et aller à l'état 54

    $défaut  réduction par utilisation de la règle 64 (logical_and_expression)


État 25

   65 logical_and_expression: logical_and_expression . AND_OP inclusive_or_expression
   66 logical_or_expression: logical_and_expression .

    AND_OP  décalage et aller à l'état 55

    $défaut  réduction par utilisation de la règle 66 (logical_or_expression)


État 26

   67 logical_or_expression: logical_or_expression . OR_OP logical_and_expression
   68 assignment_expression: logical_or_expression .

    OR_OP  décalage et aller à l'état 56

    $défaut  réduction par utilisation de la règle 68 (assignment_expression)


État 27

   18 optimization1: FOR '(' IDENTIFIER $@3 '=' assignment_expression . $@4 ';' IDENTIFIER $@5 comp_op shift_expression $@6 ';' IDENTIFIER $@7 INC ')' '{' level_vec '}'

    $défaut  réduction par utilisation de la règle 14 ($@4)

    $@4  aller à l'état 57


État 28

   32 postfix_expression: primary_expression .

    $défaut  réduction par utilisation de la règle 32 (postfix_expression)


État 29

   31 expression: expression . ',' assignment_expression
   77 primary_expression: '(' expression . ')'

    ')'  décalage et aller à l'état 58
    ','  décalage et aller à l'état 59


État 30

   30 expression: assignment_expression .

    $défaut  réduction par utilisation de la règle 30 (expression)


État 31

   38 unary_expression: INC unary_expression .

    $défaut  réduction par utilisation de la règle 38 (unary_expression)


État 32

   39 unary_expression: DEC unary_expression .

    $défaut  réduction par utilisation de la règle 39 (unary_expression)


État 33

   34 postfix_expression: postfix_expression '(' . ')'

    ')'  décalage et aller à l'état 60


État 34

   33 postfix_expression: postfix_expression '[' . expression ']'

    CONST_INT    décalage et aller à l'état 9
    CONST_FLOAT  décalage et aller à l'état 10
    IDENTIFIER   décalage et aller à l'état 11
    '('          décalage et aller à l'état 12
    INC          décalage et aller à l'état 13
    DEC          décalage et aller à l'état 14

    expression                 aller à l'état 61
    postfix_expression         aller à l'état 15
    unary_expression           aller à l'état 16
    multiplicative_expression  aller à l'état 17
    additive_expression        aller à l'état 18
    shift_expression           aller à l'état 19
    relational_expression      aller à l'état 20
    equality_expression        aller à l'état 21
    and_expression             aller à l'état 22
    exclusive_or_expression    aller à l'état 23
    inclusive_or_expression    aller à l'état 24
    logical_and_expression     aller à l'état 25
    logical_or_expression      aller à l'état 26
    assignment_expression      aller à l'état 30
    primary_expression         aller à l'état 28


État 35

   35 postfix_expression: postfix_expression INC .

    $défaut  réduction par utilisation de la règle 35 (postfix_expression)


État 36

   36 postfix_expression: postfix_expression DEC .

    $défaut  réduction par utilisation de la règle 36 (postfix_expression)


État 37

   70 assignment_operator: '=' .

    $défaut  réduction par utilisation de la règle 70 (assignment_operator)


État 38

   69 assignment_expression: unary_expression assignment_operator . assignment_expression

    CONST_INT    décalage et aller à l'état 9
    CONST_FLOAT  décalage et aller à l'état 10
    IDENTIFIER   décalage et aller à l'état 11
    '('          décalage et aller à l'état 12
    INC          décalage et aller à l'état 13
    DEC          décalage et aller à l'état 14

    postfix_expression         aller à l'état 15
    unary_expression           aller à l'état 16
    multiplicative_expression  aller à l'état 17
    additive_expression        aller à l'état 18
    shift_expression           aller à l'état 19
    relational_expression      aller à l'état 20
    equality_expression        aller à l'état 21
    and_expression             aller à l'état 22
    exclusive_or_expression    aller à l'état 23
    inclusive_or_expression    aller à l'état 24
    logical_and_expression     aller à l'état 25
    logical_or_expression      aller à l'état 26
    assignment_expression      aller à l'état 62
    primary_expression         aller à l'état 28


État 39

   42 multiplicative_expression: multiplicative_expression '/' . unary_expression

    CONST_INT    décalage et aller à l'état 9
    CONST_FLOAT  décalage et aller à l'état 10
    IDENTIFIER   décalage et aller à l'état 11
    '('          décalage et aller à l'état 12
    INC          décalage et aller à l'état 13
    DEC          décalage et aller à l'état 14

    postfix_expression  aller à l'état 15
    unary_expression    aller à l'état 63
    primary_expression  aller à l'état 28


État 40

   41 multiplicative_expression: multiplicative_expression '*' . unary_expression

    CONST_INT    décalage et aller à l'état 9
    CONST_FLOAT  décalage et aller à l'état 10
    IDENTIFIER   décalage et aller à l'état 11
    '('          décalage et aller à l'état 12
    INC          décalage et aller à l'état 13
    DEC          décalage et aller à l'état 14

    postfix_expression  aller à l'état 15
    unary_expression    aller à l'état 64
    primary_expression  aller à l'état 28


État 41

   43 multiplicative_expression: multiplicative_expression '%' . unary_expression

    CONST_INT    décalage et aller à l'état 9
    CONST_FLOAT  décalage et aller à l'état 10
    IDENTIFIER   décalage et aller à l'état 11
    '('          décalage et aller à l'état 12
    INC          décalage et aller à l'état 13
    DEC          décalage et aller à l'état 14

    postfix_expression  aller à l'état 15
    unary_expression    aller à l'état 65
    primary_expression  aller à l'état 28


État 42

   45 additive_expression: additive_expression '+' . multiplicative_expression

    CONST_INT    décalage et aller à l'état 9
    CONST_FLOAT  décalage et aller à l'état 10
    IDENTIFIER   décalage et aller à l'état 11
    '('          décalage et aller à l'état 12
    INC          décalage et aller à l'état 13
    DEC          décalage et aller à l'état 14

    postfix_expression         aller à l'état 15
    unary_expression           aller à l'état 66
    multiplicative_expression  aller à l'état 67
    primary_expression         aller à l'état 28


État 43

   46 additive_expression: additive_expression '-' . multiplicative_expression

    CONST_INT    décalage et aller à l'état 9
    CONST_FLOAT  décalage et aller à l'état 10
    IDENTIFIER   décalage et aller à l'état 11
    '('          décalage et aller à l'état 12
    INC          décalage et aller à l'état 13
    DEC          décalage et aller à l'état 14

    postfix_expression         aller à l'état 15
    unary_expression           aller à l'état 66
    multiplicative_expression  aller à l'état 68
    primary_expression         aller à l'état 28


État 44

   48 shift_expression: shift_expression LEFT_OP . additive_expression

    CONST_INT    décalage et aller à l'état 9
    CONST_FLOAT  décalage et aller à l'état 10
    IDENTIFIER   décalage et aller à l'état 11
    '('          décalage et aller à l'état 12
    INC          décalage et aller à l'état 13
    DEC          décalage et aller à l'état 14

    postfix_expression         aller à l'état 15
    unary_expression           aller à l'état 66
    multiplicative_expression  aller à l'état 17
    additive_expression        aller à l'état 69
    primary_expression         aller à l'état 28


État 45

   49 shift_expression: shift_expression RIGHT_OP . additive_expression

    CONST_INT    décalage et aller à l'état 9
    CONST_FLOAT  décalage et aller à l'état 10
    IDENTIFIER   décalage et aller à l'état 11
    '('          décalage et aller à l'état 12
    INC          décalage et aller à l'état 13
    DEC          décalage et aller à l'état 14

    postfix_expression         aller à l'état 15
    unary_expression           aller à l'état 66
    multiplicative_expression  aller à l'état 17
    additive_expression        aller à l'état 70
    primary_expression         aller à l'état 28


État 46

   51 relational_expression: relational_expression '<' . shift_expression

    CONST_INT    décalage et aller à l'état 9
    CONST_FLOAT  décalage et aller à l'état 10
    IDENTIFIER   décalage et aller à l'état 11
    '('          décalage et aller à l'état 12
    INC          décalage et aller à l'état 13
    DEC          décalage et aller à l'état 14

    postfix_expression         aller à l'état 15
    unary_expression           aller à l'état 66
    multiplicative_expression  aller à l'état 17
    additive_expression        aller à l'état 18
    shift_expression           aller à l'état 71
    primary_expression         aller à l'état 28


État 47

   52 relational_expression: relational_expression '>' . shift_expression

    CONST_INT    décalage et aller à l'état 9
    CONST_FLOAT  décalage et aller à l'état 10
    IDENTIFIER   décalage et aller à l'état 11
    '('          décalage et aller à l'état 12
    INC          décalage et aller à l'état 13
    DEC          décalage et aller à l'état 14

    postfix_expression         aller à l'état 15
    unary_expression           aller à l'état 66
    multiplicative_expression  aller à l'état 17
    additive_expression        aller à l'état 18
    shift_expression           aller à l'état 72
    primary_expression         aller à l'état 28


État 48

   53 relational_expression: relational_expression LE_OP . shift_expression

    CONST_INT    décalage et aller à l'état 9
    CONST_FLOAT  décalage et aller à l'état 10
    IDENTIFIER   décalage et aller à l'état 11
    '('          décalage et aller à l'état 12
    INC          décalage et aller à l'état 13
    DEC          décalage et aller à l'état 14

    postfix_expression         aller à l'état 15
    unary_expression           aller à l'état 66
    multiplicative_expression  aller à l'état 17
    additive_expression        aller à l'état 18
    shift_expression           aller à l'état 73
    primary_expression         aller à l'état 28


État 49

   54 relational_expression: relational_expression GE_OP . shift_expression

    CONST_INT    décalage et aller à l'état 9
    CONST_FLOAT  décalage et aller à l'état 10
    IDENTIFIER   décalage et aller à l'état 11
    '('          décalage et aller à l'état 12
    INC          décalage et aller à l'état 13
    DEC          décalage et aller à l'état 14

    postfix_expression         aller à l'état 15
    unary_expression           aller à l'état 66
    multiplicative_expression  aller à l'état 17
    additive_expression        aller à l'état 18
    shift_expression           aller à l'état 74
    primary_expression         aller à l'état 28


État 50

   56 equality_expression: equality_expression EQ_OP . relational_expression

    CONST_INT    décalage et aller à l'état 9
    CONST_FLOAT  décalage et aller à l'état 10
    IDENTIFIER   décalage et aller à l'état 11
    '('          décalage et aller à l'état 12
    INC          décalage et aller à l'état 13
    DEC          décalage et aller à l'état 14

    postfix_expression         aller à l'état 15
    unary_expression           aller à l'état 66
    multiplicative_expression  aller à l'état 17
    additive_expression        aller à l'état 18
    shift_expression           aller à l'état 19
    relational_expression      aller à l'état 75
    primary_expression         aller à l'état 28


État 51

   57 equality_expression: equality_expression NE_OP . relational_expression

    CONST_INT    décalage et aller à l'état 9
    CONST_FLOAT  décalage et aller à l'état 10
    IDENTIFIER   décalage et aller à l'état 11
    '('          décalage et aller à l'état 12
    INC          décalage et aller à l'état 13
    DEC          décalage et aller à l'état 14

    postfix_expression         aller à l'état 15
    unary_expression           aller à l'état 66
    multiplicative_expression  aller à l'état 17
    additive_expression        aller à l'état 18
    shift_expression           aller à l'état 19
    relational_expression      aller à l'état 76
    primary_expression         aller à l'état 28


État 52

   59 and_expression: and_expression '&' . equality_expression

    CONST_INT    décalage et aller à l'état 9
    CONST_FLOAT  décalage et aller à l'état 10
    IDENTIFIER   décalage et aller à l'état 11
    '('          décalage et aller à l'état 12
    INC          décalage et aller à l'état 13
    DEC          décalage et aller à l'état 14

    postfix_expression         aller à l'état 15
    unary_expression           aller à l'état 66
    multiplicative_expression  aller à l'état 17
    additive_expression        aller à l'état 18
    shift_expression           aller à l'état 19
    relational_expression      aller à l'état 20
    equality_expression        aller à l'état 77
    primary_expression         aller à l'état 28


État 53

   61 exclusive_or_expression: exclusive_or_expression '^' . and_expression

    CONST_INT    décalage et aller à l'état 9
    CONST_FLOAT  décalage et aller à l'état 10
    IDENTIFIER   décalage et aller à l'état 11
    '('          décalage et aller à l'état 12
    INC          décalage et aller à l'état 13
    DEC          décalage et aller à l'état 14

    postfix_expression         aller à l'état 15
    unary_expression           aller à l'état 66
    multiplicative_expression  aller à l'état 17
    additive_expression        aller à l'état 18
    shift_expression           aller à l'état 19
    relational_expression      aller à l'état 20
    equality_expression        aller à l'état 21
    and_expression             aller à l'état 78
    primary_expression         aller à l'état 28


État 54

   63 inclusive_or_expression: inclusive_or_expression '|' . exclusive_or_expression

    CONST_INT    décalage et aller à l'état 9
    CONST_FLOAT  décalage et aller à l'état 10
    IDENTIFIER   décalage et aller à l'état 11
    '('          décalage et aller à l'état 12
    INC          décalage et aller à l'état 13
    DEC          décalage et aller à l'état 14

    postfix_expression         aller à l'état 15
    unary_expression           aller à l'état 66
    multiplicative_expression  aller à l'état 17
    additive_expression        aller à l'état 18
    shift_expression           aller à l'état 19
    relational_expression      aller à l'état 20
    equality_expression        aller à l'état 21
    and_expression             aller à l'état 22
    exclusive_or_expression    aller à l'état 79
    primary_expression         aller à l'état 28


État 55

   65 logical_and_expression: logical_and_expression AND_OP . inclusive_or_expression

    CONST_INT    décalage et aller à l'état 9
    CONST_FLOAT  décalage et aller à l'état 10
    IDENTIFIER   décalage et aller à l'état 11
    '('          décalage et aller à l'état 12
    INC          décalage et aller à l'état 13
    DEC          décalage et aller à l'état 14

    postfix_expression         aller à l'état 15
    unary_expression           aller à l'état 66
    multiplicative_expression  aller à l'état 17
    additive_expression        aller à l'état 18
    shift_expression           aller à l'état 19
    relational_expression      aller à l'état 20
    equality_expression        aller à l'état 21
    and_expression             aller à l'état 22
    exclusive_or_expression    aller à l'état 23
    inclusive_or_expression    aller à l'état 80
    primary_expression         aller à l'état 28


État 56

   67 logical_or_expression: logical_or_expression OR_OP . logical_and_expression

    CONST_INT    décalage et aller à l'état 9
    CONST_FLOAT  décalage et aller à l'état 10
    IDENTIFIER   décalage et aller à l'état 11
    '('          décalage et aller à l'état 12
    INC          décalage et aller à l'état 13
    DEC          décalage et aller à l'état 14

    postfix_expression         aller à l'état 15
    unary_expression           aller à l'état 66
    multiplicative_expression  aller à l'état 17
    additive_expression        aller à l'état 18
    shift_expression           aller à l'état 19
    relational_expression      aller à l'état 20
    equality_expression        aller à l'état 21
    and_expression             aller à l'état 22
    exclusive_or_expression    aller à l'état 23
    inclusive_or_expression    aller à l'état 24
    logical_and_expression     aller à l'état 81
    primary_expression         aller à l'état 28


État 57

   18 optimization1: FOR '(' IDENTIFIER $@3 '=' assignment_expression $@4 . ';' IDENTIFIER $@5 comp_op shift_expression $@6 ';' IDENTIFIER $@7 INC ')' '{' level_vec '}'

    ';'  décalage et aller à l'état 82


État 58

   77 primary_expression: '(' expression ')' .

    $défaut  réduction par utilisation de la règle 77 (primary_expression)


État 59

   31 expression: expression ',' . assignment_expression

    CONST_INT    décalage et aller à l'état 9
    CONST_FLOAT  décalage et aller à l'état 10
    IDENTIFIER   décalage et aller à l'état 11
    '('          décalage et aller à l'état 12
    INC          décalage et aller à l'état 13
    DEC          décalage et aller à l'état 14

    postfix_expression         aller à l'état 15
    unary_expression           aller à l'état 16
    multiplicative_expression  aller à l'état 17
    additive_expression        aller à l'état 18
    shift_expression           aller à l'état 19
    relational_expression      aller à l'état 20
    equality_expression        aller à l'état 21
    and_expression             aller à l'état 22
    exclusive_or_expression    aller à l'état 23
    inclusive_or_expression    aller à l'état 24
    logical_and_expression     aller à l'état 25
    logical_or_expression      aller à l'état 26
    assignment_expression      aller à l'état 83
    primary_expression         aller à l'état 28


État 60

   34 postfix_expression: postfix_expression '(' ')' .

    $défaut  réduction par utilisation de la règle 34 (postfix_expression)


État 61

   31 expression: expression . ',' assignment_expression
   33 postfix_expression: postfix_expression '[' expression . ']'

    ']'  décalage et aller à l'état 84
    ','  décalage et aller à l'état 59


État 62

   69 assignment_expression: unary_expression assignment_operator assignment_expression .

    $défaut  réduction par utilisation de la règle 69 (assignment_expression)


État 63

   42 multiplicative_expression: multiplicative_expression '/' unary_expression .

    $défaut  réduction par utilisation de la règle 42 (multiplicative_expression)


État 64

   41 multiplicative_expression: multiplicative_expression '*' unary_expression .

    $défaut  réduction par utilisation de la règle 41 (multiplicative_expression)


État 65

   43 multiplicative_expression: multiplicative_expression '%' unary_expression .

    $défaut  réduction par utilisation de la règle 43 (multiplicative_expression)


État 66

   40 multiplicative_expression: unary_expression .

    $défaut  réduction par utilisation de la règle 40 (multiplicative_expression)


État 67

   41 multiplicative_expression: multiplicative_expression . '*' unary_expression
   42                          | multiplicative_expression . '/' unary_expression
   43                          | multiplicative_expression . '%' unary_expression
   45 additive_expression: additive_expression '+' multiplicative_expression .

    '/'  décalage et aller à l'état 39
    '*'  décalage et aller à l'état 40
    '%'  décalage et aller à l'état 41

    $défaut  réduction par utilisation de la règle 45 (additive_expression)


État 68

   41 multiplicative_expression: multiplicative_expression . '*' unary_expression
   42                          | multiplicative_expression . '/' unary_expression
   43                          | multiplicative_expression . '%' unary_expression
   46 additive_expression: additive_expression '-' multiplicative_expression .

    '/'  décalage et aller à l'état 39
    '*'  décalage et aller à l'état 40
    '%'  décalage et aller à l'état 41

    $défaut  réduction par utilisation de la règle 46 (additive_expression)


État 69

   45 additive_expression: additive_expression . '+' multiplicative_expression
   46                    | additive_expression . '-' multiplicative_expression
   48 shift_expression: shift_expression LEFT_OP additive_expression .

    '+'  décalage et aller à l'état 42
    '-'  décalage et aller à l'état 43

    '+'       [réduction par utilisation de la règle 48 (shift_expression)]
    $défaut  réduction par utilisation de la règle 48 (shift_expression)


État 70

   45 additive_expression: additive_expression . '+' multiplicative_expression
   46                    | additive_expression . '-' multiplicative_expression
   49 shift_expression: shift_expression RIGHT_OP additive_expression .

    '+'  décalage et aller à l'état 42
    '-'  décalage et aller à l'état 43

    '+'       [réduction par utilisation de la règle 49 (shift_expression)]
    $défaut  réduction par utilisation de la règle 49 (shift_expression)


État 71

   48 shift_expression: shift_expression . LEFT_OP additive_expression
   49                 | shift_expression . RIGHT_OP additive_expression
   51 relational_expression: relational_expression '<' shift_expression .

    LEFT_OP   décalage et aller à l'état 44
    RIGHT_OP  décalage et aller à l'état 45

    $défaut  réduction par utilisation de la règle 51 (relational_expression)


État 72

   48 shift_expression: shift_expression . LEFT_OP additive_expression
   49                 | shift_expression . RIGHT_OP additive_expression
   52 relational_expression: relational_expression '>' shift_expression .

    LEFT_OP   décalage et aller à l'état 44
    RIGHT_OP  décalage et aller à l'état 45

    $défaut  réduction par utilisation de la règle 52 (relational_expression)


État 73

   48 shift_expression: shift_expression . LEFT_OP additive_expression
   49                 | shift_expression . RIGHT_OP additive_expression
   53 relational_expression: relational_expression LE_OP shift_expression .

    LEFT_OP   décalage et aller à l'état 44
    RIGHT_OP  décalage et aller à l'état 45

    $défaut  réduction par utilisation de la règle 53 (relational_expression)


État 74

   48 shift_expression: shift_expression . LEFT_OP additive_expression
   49                 | shift_expression . RIGHT_OP additive_expression
   54 relational_expression: relational_expression GE_OP shift_expression .

    LEFT_OP   décalage et aller à l'état 44
    RIGHT_OP  décalage et aller à l'état 45

    $défaut  réduction par utilisation de la règle 54 (relational_expression)


État 75

   51 relational_expression: relational_expression . '<' shift_expression
   52                      | relational_expression . '>' shift_expression
   53                      | relational_expression . LE_OP shift_expression
   54                      | relational_expression . GE_OP shift_expression
   56 equality_expression: equality_expression EQ_OP relational_expression .

    '<'    décalage et aller à l'état 46
    '>'    décalage et aller à l'état 47
    LE_OP  décalage et aller à l'état 48
    GE_OP  décalage et aller à l'état 49

    $défaut  réduction par utilisation de la règle 56 (equality_expression)


État 76

   51 relational_expression: relational_expression . '<' shift_expression
   52                      | relational_expression . '>' shift_expression
   53                      | relational_expression . LE_OP shift_expression
   54                      | relational_expression . GE_OP shift_expression
   57 equality_expression: equality_expression NE_OP relational_expression .

    '<'    décalage et aller à l'état 46
    '>'    décalage et aller à l'état 47
    LE_OP  décalage et aller à l'état 48
    GE_OP  décalage et aller à l'état 49

    $défaut  réduction par utilisation de la règle 57 (equality_expression)


État 77

   56 equality_expression: equality_expression . EQ_OP relational_expression
   57                    | equality_expression . NE_OP relational_expression
   59 and_expression: and_expression '&' equality_expression .

    EQ_OP  décalage et aller à l'état 50
    NE_OP  décalage et aller à l'état 51

    $défaut  réduction par utilisation de la règle 59 (and_expression)


État 78

   59 and_expression: and_expression . '&' equality_expression
   61 exclusive_or_expression: exclusive_or_expression '^' and_expression .

    '&'  décalage et aller à l'état 52

    $défaut  réduction par utilisation de la règle 61 (exclusive_or_expression)


État 79

   61 exclusive_or_expression: exclusive_or_expression . '^' and_expression
   63 inclusive_or_expression: inclusive_or_expression '|' exclusive_or_expression .

    '^'  décalage et aller à l'état 53

    $défaut  réduction par utilisation de la règle 63 (inclusive_or_expression)


État 80

   63 inclusive_or_expression: inclusive_or_expression . '|' exclusive_or_expression
   65 logical_and_expression: logical_and_expression AND_OP inclusive_or_expression .

    '|'  décalage et aller à l'état 54

    $défaut  réduction par utilisation de la règle 65 (logical_and_expression)


État 81

   65 logical_and_expression: logical_and_expression . AND_OP inclusive_or_expression
   67 logical_or_expression: logical_or_expression OR_OP logical_and_expression .

    AND_OP  décalage et aller à l'état 55

    $défaut  réduction par utilisation de la règle 67 (logical_or_expression)


État 82

   18 optimization1: FOR '(' IDENTIFIER $@3 '=' assignment_expression $@4 ';' . IDENTIFIER $@5 comp_op shift_expression $@6 ';' IDENTIFIER $@7 INC ')' '{' level_vec '}'

    IDENTIFIER  décalage et aller à l'état 85


État 83

   31 expression: expression ',' assignment_expression .

    $défaut  réduction par utilisation de la règle 31 (expression)


État 84

   33 postfix_expression: postfix_expression '[' expression ']' .

    $défaut  réduction par utilisation de la règle 33 (postfix_expression)


État 85

   18 optimization1: FOR '(' IDENTIFIER $@3 '=' assignment_expression $@4 ';' IDENTIFIER . $@5 comp_op shift_expression $@6 ';' IDENTIFIER $@7 INC ')' '{' level_vec '}'

    $défaut  réduction par utilisation de la règle 15 ($@5)

    $@5  aller à l'état 86


État 86

   18 optimization1: FOR '(' IDENTIFIER $@3 '=' assignment_expression $@4 ';' IDENTIFIER $@5 . comp_op shift_expression $@6 ';' IDENTIFIER $@7 INC ')' '{' level_vec '}'

    '<'    décalage et aller à l'état 87
    LE_OP  décalage et aller à l'état 88

    comp_op  aller à l'état 89


État 87

   29 comp_op: '<' .

    $défaut  réduction par utilisation de la règle 29 (comp_op)


État 88

   28 comp_op: LE_OP .

    $défaut  réduction par utilisation de la règle 28 (comp_op)


État 89

   18 optimization1: FOR '(' IDENTIFIER $@3 '=' assignment_expression $@4 ';' IDENTIFIER $@5 comp_op . shift_expression $@6 ';' IDENTIFIER $@7 INC ')' '{' level_vec '}'

    CONST_INT    décalage et aller à l'état 9
    CONST_FLOAT  décalage et aller à l'état 10
    IDENTIFIER   décalage et aller à l'état 11
    '('          décalage et aller à l'état 12
    INC          décalage et aller à l'état 13
    DEC          décalage et aller à l'état 14

    postfix_expression         aller à l'état 15
    unary_expression           aller à l'état 66
    multiplicative_expression  aller à l'état 17
    additive_expression        aller à l'état 18
    shift_expression           aller à l'état 90
    primary_expression         aller à l'état 28


État 90

   18 optimization1: FOR '(' IDENTIFIER $@3 '=' assignment_expression $@4 ';' IDENTIFIER $@5 comp_op shift_expression . $@6 ';' IDENTIFIER $@7 INC ')' '{' level_vec '}'
   48 shift_expression: shift_expression . LEFT_OP additive_expression
   49                 | shift_expression . RIGHT_OP additive_expression

    LEFT_OP   décalage et aller à l'état 44
    RIGHT_OP  décalage et aller à l'état 45

    $défaut  réduction par utilisation de la règle 16 ($@6)

    $@6  aller à l'état 91


État 91

   18 optimization1: FOR '(' IDENTIFIER $@3 '=' assignment_expression $@4 ';' IDENTIFIER $@5 comp_op shift_expression $@6 . ';' IDENTIFIER $@7 INC ')' '{' level_vec '}'

    ';'  décalage et aller à l'état 92


État 92

   18 optimization1: FOR '(' IDENTIFIER $@3 '=' assignment_expression $@4 ';' IDENTIFIER $@5 comp_op shift_expression $@6 ';' . IDENTIFIER $@7 INC ')' '{' level_vec '}'

    IDENTIFIER  décalage et aller à l'état 93


État 93

   18 optimization1: FOR '(' IDENTIFIER $@3 '=' assignment_expression $@4 ';' IDENTIFIER $@5 comp_op shift_expression $@6 ';' IDENTIFIER . $@7 INC ')' '{' level_vec '}'

    $défaut  réduction par utilisation de la règle 17 ($@7)

    $@7  aller à l'état 94


État 94

   18 optimization1: FOR '(' IDENTIFIER $@3 '=' assignment_expression $@4 ';' IDENTIFIER $@5 comp_op shift_expression $@6 ';' IDENTIFIER $@7 . INC ')' '{' level_vec '}'

    INC  décalage et aller à l'état 95


État 95

   18 optimization1: FOR '(' IDENTIFIER $@3 '=' assignment_expression $@4 ';' IDENTIFIER $@5 comp_op shift_expression $@6 ';' IDENTIFIER $@7 INC . ')' '{' level_vec '}'

    ')'  décalage et aller à l'état 96


État 96

   18 optimization1: FOR '(' IDENTIFIER $@3 '=' assignment_expression $@4 ';' IDENTIFIER $@5 comp_op shift_expression $@6 ';' IDENTIFIER $@7 INC ')' . '{' level_vec '}'

    '{'  décalage et aller à l'état 97


État 97

   18 optimization1: FOR '(' IDENTIFIER $@3 '=' assignment_expression $@4 ';' IDENTIFIER $@5 comp_op shift_expression $@6 ';' IDENTIFIER $@7 INC ')' '{' . level_vec '}'

    INT    décalage et aller à l'état 98
    VOID   décalage et aller à l'état 99
    FLOAT  décalage et aller à l'état 100

    $défaut  réduction par utilisation de la règle 2 (a)

    a               aller à l'état 101
    level_vec       aller à l'état 102
    level1          aller à l'état 103
    level1_2        aller à l'état 104
    vec_swap        aller à l'état 105
    level2          aller à l'état 106
    level1_1        aller à l'état 107
    type_specifier  aller à l'état 108


État 98

   72 type_specifier: INT .

    $défaut  réduction par utilisation de la règle 72 (type_specifier)


État 99

   71 type_specifier: VOID .

    $défaut  réduction par utilisation de la règle 71 (type_specifier)


État 100

   73 type_specifier: FLOAT .

    $défaut  réduction par utilisation de la règle 73 (type_specifier)


État 101

   11 level2: a . a a a a a a a a a a a a a a FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@2 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}'
   12 level1_1: a . a a a a a a a a a a a a a a IDENTIFIER '[' IDENTIFIER ']' assignment_operator optimization1_1 ';'

    $défaut  réduction par utilisation de la règle 2 (a)

    a  aller à l'état 109


État 102

   18 optimization1: FOR '(' IDENTIFIER $@3 '=' assignment_expression $@4 ';' IDENTIFIER $@5 comp_op shift_expression $@6 ';' IDENTIFIER $@7 INC ')' '{' level_vec . '}'

    '}'  décalage et aller à l'état 110


État 103

    3 level_vec: level1 .

    $défaut  réduction par utilisation de la règle 3 (level_vec)


État 104

    6 level1: level1_2 .

    $défaut  réduction par utilisation de la règle 6 (level1)


État 105

    7 level1_2: vec_swap .

    $défaut  réduction par utilisation de la règle 7 (level1_2)


État 106

    4 level_vec: level2 .

    $défaut  réduction par utilisation de la règle 4 (level_vec)


État 107

    5 level1: level1_1 .

    $défaut  réduction par utilisation de la règle 5 (level1)


État 108

    8 vec_swap: type_specifier . IDENTIFIER assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER ';'

    IDENTIFIER  décalage et aller à l'état 111


État 109

   11 level2: a a . a a a a a a a a a a a a a FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@2 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}'
   12 level1_1: a a . a a a a a a a a a a a a a IDENTIFIER '[' IDENTIFIER ']' assignment_operator optimization1_1 ';'

    $défaut  réduction par utilisation de la règle 2 (a)

    a  aller à l'état 112


État 110

   18 optimization1: FOR '(' IDENTIFIER $@3 '=' assignment_expression $@4 ';' IDENTIFIER $@5 comp_op shift_expression $@6 ';' IDENTIFIER $@7 INC ')' '{' level_vec '}' .

    $défaut  réduction par utilisation de la règle 18 (optimization1)


État 111

    8 vec_swap: type_specifier IDENTIFIER . assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER ';'

    '='  décalage et aller à l'état 37

    assignment_operator  aller à l'état 113


État 112

   11 level2: a a a . a a a a a a a a a a a a FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@2 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}'
   12 level1_1: a a a . a a a a a a a a a a a a IDENTIFIER '[' IDENTIFIER ']' assignment_operator optimization1_1 ';'

    $défaut  réduction par utilisation de la règle 2 (a)

    a  aller à l'état 114


État 113

    8 vec_swap: type_specifier IDENTIFIER assignment_operator . IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER ';'

    IDENTIFIER  décalage et aller à l'état 115


État 114

   11 level2: a a a a . a a a a a a a a a a a FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@2 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}'
   12 level1_1: a a a a . a a a a a a a a a a a IDENTIFIER '[' IDENTIFIER ']' assignment_operator optimization1_1 ';'

    $défaut  réduction par utilisation de la règle 2 (a)

    a  aller à l'état 116


État 115

    8 vec_swap: type_specifier IDENTIFIER assignment_operator IDENTIFIER . '[' IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER ';'

    '['  décalage et aller à l'état 117


État 116

   11 level2: a a a a a . a a a a a a a a a a FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@2 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}'
   12 level1_1: a a a a a . a a a a a a a a a a IDENTIFIER '[' IDENTIFIER ']' assignment_operator optimization1_1 ';'

    $défaut  réduction par utilisation de la règle 2 (a)

    a  aller à l'état 118


État 117

    8 vec_swap: type_specifier IDENTIFIER assignment_operator IDENTIFIER '[' . IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER ';'

    IDENTIFIER  décalage et aller à l'état 119


État 118

   11 level2: a a a a a a . a a a a a a a a a FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@2 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}'
   12 level1_1: a a a a a a . a a a a a a a a a IDENTIFIER '[' IDENTIFIER ']' assignment_operator optimization1_1 ';'

    $défaut  réduction par utilisation de la règle 2 (a)

    a  aller à l'état 120


État 119

    8 vec_swap: type_specifier IDENTIFIER assignment_operator IDENTIFIER '[' IDENTIFIER . ']' ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER ';'

    ']'  décalage et aller à l'état 121


État 120

   11 level2: a a a a a a a . a a a a a a a a FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@2 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}'
   12 level1_1: a a a a a a a . a a a a a a a a IDENTIFIER '[' IDENTIFIER ']' assignment_operator optimization1_1 ';'

    $défaut  réduction par utilisation de la règle 2 (a)

    a  aller à l'état 122


État 121

    8 vec_swap: type_specifier IDENTIFIER assignment_operator IDENTIFIER '[' IDENTIFIER ']' . ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER ';'

    ';'  décalage et aller à l'état 123


État 122

   11 level2: a a a a a a a a . a a a a a a a FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@2 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}'
   12 level1_1: a a a a a a a a . a a a a a a a IDENTIFIER '[' IDENTIFIER ']' assignment_operator optimization1_1 ';'

    $défaut  réduction par utilisation de la règle 2 (a)

    a  aller à l'état 124


État 123

    8 vec_swap: type_specifier IDENTIFIER assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' . IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER ';'

    IDENTIFIER  décalage et aller à l'état 125


État 124

   11 level2: a a a a a a a a a . a a a a a a FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@2 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}'
   12 level1_1: a a a a a a a a a . a a a a a a IDENTIFIER '[' IDENTIFIER ']' assignment_operator optimization1_1 ';'

    $défaut  réduction par utilisation de la règle 2 (a)

    a  aller à l'état 126


État 125

    8 vec_swap: type_specifier IDENTIFIER assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER . '[' IDENTIFIER ']' assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER ';'

    '['  décalage et aller à l'état 127


État 126

   11 level2: a a a a a a a a a a . a a a a a FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@2 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}'
   12 level1_1: a a a a a a a a a a . a a a a a IDENTIFIER '[' IDENTIFIER ']' assignment_operator optimization1_1 ';'

    $défaut  réduction par utilisation de la règle 2 (a)

    a  aller à l'état 128


État 127

    8 vec_swap: type_specifier IDENTIFIER assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER '[' . IDENTIFIER ']' assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER ';'

    IDENTIFIER  décalage et aller à l'état 129


État 128

   11 level2: a a a a a a a a a a a . a a a a FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@2 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}'
   12 level1_1: a a a a a a a a a a a . a a a a IDENTIFIER '[' IDENTIFIER ']' assignment_operator optimization1_1 ';'

    $défaut  réduction par utilisation de la règle 2 (a)

    a  aller à l'état 130


État 129

    8 vec_swap: type_specifier IDENTIFIER assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER . ']' assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER ';'

    ']'  décalage et aller à l'état 131


État 130

   11 level2: a a a a a a a a a a a a . a a a FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@2 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}'
   12 level1_1: a a a a a a a a a a a a . a a a IDENTIFIER '[' IDENTIFIER ']' assignment_operator optimization1_1 ';'

    $défaut  réduction par utilisation de la règle 2 (a)

    a  aller à l'état 132


État 131

    8 vec_swap: type_specifier IDENTIFIER assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER ']' . assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER ';'

    '='  décalage et aller à l'état 37

    assignment_operator  aller à l'état 133


État 132

   11 level2: a a a a a a a a a a a a a . a a FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@2 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}'
   12 level1_1: a a a a a a a a a a a a a . a a IDENTIFIER '[' IDENTIFIER ']' assignment_operator optimization1_1 ';'

    $défaut  réduction par utilisation de la règle 2 (a)

    a  aller à l'état 134


État 133

    8 vec_swap: type_specifier IDENTIFIER assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator . IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER ';'

    IDENTIFIER  décalage et aller à l'état 135


État 134

   11 level2: a a a a a a a a a a a a a a . a FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@2 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}'
   12 level1_1: a a a a a a a a a a a a a a . a IDENTIFIER '[' IDENTIFIER ']' assignment_operator optimization1_1 ';'

    $défaut  réduction par utilisation de la règle 2 (a)

    a  aller à l'état 136


État 135

    8 vec_swap: type_specifier IDENTIFIER assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER . '[' IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER ';'

    '['  décalage et aller à l'état 137


État 136

   11 level2: a a a a a a a a a a a a a a a . FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@2 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}'
   12 level1_1: a a a a a a a a a a a a a a a . IDENTIFIER '[' IDENTIFIER ']' assignment_operator optimization1_1 ';'

    FOR         décalage et aller à l'état 138
    IDENTIFIER  décalage et aller à l'état 139


État 137

    8 vec_swap: type_specifier IDENTIFIER assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER '[' . IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER ';'

    IDENTIFIER  décalage et aller à l'état 140


État 138

   11 level2: a a a a a a a a a a a a a a a FOR . '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@2 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}'

    '('  décalage et aller à l'état 141


État 139

   12 level1_1: a a a a a a a a a a a a a a a IDENTIFIER . '[' IDENTIFIER ']' assignment_operator optimization1_1 ';'

    '['  décalage et aller à l'état 142


État 140

    8 vec_swap: type_specifier IDENTIFIER assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER '[' IDENTIFIER . ']' ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER ';'

    ']'  décalage et aller à l'état 143


État 141

   11 level2: a a a a a a a a a a a a a a a FOR '(' . IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@2 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}'

    IDENTIFIER  décalage et aller à l'état 144


État 142

   12 level1_1: a a a a a a a a a a a a a a a IDENTIFIER '[' . IDENTIFIER ']' assignment_operator optimization1_1 ';'

    IDENTIFIER  décalage et aller à l'état 145


État 143

    8 vec_swap: type_specifier IDENTIFIER assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER '[' IDENTIFIER ']' . ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER ';'

    ';'  décalage et aller à l'état 146


État 144

   11 level2: a a a a a a a a a a a a a a a FOR '(' IDENTIFIER . $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@2 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}'

    $défaut  réduction par utilisation de la règle 9 ($@1)

    $@1  aller à l'état 147


État 145

   12 level1_1: a a a a a a a a a a a a a a a IDENTIFIER '[' IDENTIFIER . ']' assignment_operator optimization1_1 ';'

    ']'  décalage et aller à l'état 148


État 146

    8 vec_swap: type_specifier IDENTIFIER assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' . IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER ';'

    IDENTIFIER  décalage et aller à l'état 149


État 147

   11 level2: a a a a a a a a a a a a a a a FOR '(' IDENTIFIER $@1 . '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@2 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}'

    '='  décalage et aller à l'état 150


État 148

   12 level1_1: a a a a a a a a a a a a a a a IDENTIFIER '[' IDENTIFIER ']' . assignment_operator optimization1_1 ';'

    '='  décalage et aller à l'état 37

    assignment_operator  aller à l'état 151


État 149

    8 vec_swap: type_specifier IDENTIFIER assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER . '[' IDENTIFIER ']' assignment_operator IDENTIFIER ';'

    '['  décalage et aller à l'état 152


État 150

   11 level2: a a a a a a a a a a a a a a a FOR '(' IDENTIFIER $@1 '=' . assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@2 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}'

    CONST_INT    décalage et aller à l'état 9
    CONST_FLOAT  décalage et aller à l'état 10
    IDENTIFIER   décalage et aller à l'état 11
    '('          décalage et aller à l'état 12
    INC          décalage et aller à l'état 13
    DEC          décalage et aller à l'état 14

    postfix_expression         aller à l'état 15
    unary_expression           aller à l'état 16
    multiplicative_expression  aller à l'état 17
    additive_expression        aller à l'état 18
    shift_expression           aller à l'état 19
    relational_expression      aller à l'état 20
    equality_expression        aller à l'état 21
    and_expression             aller à l'état 22
    exclusive_or_expression    aller à l'état 23
    inclusive_or_expression    aller à l'état 24
    logical_and_expression     aller à l'état 25
    logical_or_expression      aller à l'état 26
    assignment_expression      aller à l'état 153
    primary_expression         aller à l'état 28


État 151

   12 level1_1: a a a a a a a a a a a a a a a IDENTIFIER '[' IDENTIFIER ']' assignment_operator . optimization1_1 ';'

    CONST_INT    décalage et aller à l'état 9
    CONST_FLOAT  décalage et aller à l'état 10
    IDENTIFIER   décalage et aller à l'état 154
    '('          décalage et aller à l'état 12
    INC          décalage et aller à l'état 13
    DEC          décalage et aller à l'état 14

    optimization1_1            aller à l'état 155
    postfix_expression         aller à l'état 15
    unary_expression           aller à l'état 16
    multiplicative_expression  aller à l'état 17
    additive_expression        aller à l'état 18
    shift_expression           aller à l'état 19
    relational_expression      aller à l'état 20
    equality_expression        aller à l'état 21
    and_expression             aller à l'état 22
    exclusive_or_expression    aller à l'état 23
    inclusive_or_expression    aller à l'état 24
    logical_and_expression     aller à l'état 25
    logical_or_expression      aller à l'état 26
    assignment_expression      aller à l'état 156
    primary_expression         aller à l'état 157


État 152

    8 vec_swap: type_specifier IDENTIFIER assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER '[' . IDENTIFIER ']' assignment_operator IDENTIFIER ';'

    IDENTIFIER  décalage et aller à l'état 158


État 153

   11 level2: a a a a a a a a a a a a a a a FOR '(' IDENTIFIER $@1 '=' assignment_expression . ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@2 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}'

    ';'  décalage et aller à l'état 159


État 154

   23 optimization1_1: IDENTIFIER . '[' IDENTIFIER ']' '*' primary_expression
   24                | IDENTIFIER . '[' IDENTIFIER ']'
   74 primary_expression: IDENTIFIER .

    '['  décalage et aller à l'état 160

    '['       [réduction par utilisation de la règle 74 (primary_expression)]
    $défaut  réduction par utilisation de la règle 74 (primary_expression)


État 155

   12 level1_1: a a a a a a a a a a a a a a a IDENTIFIER '[' IDENTIFIER ']' assignment_operator optimization1_1 . ';'
   26 optimization1_1: optimization1_1 . '+' optimization1_1

    ';'  décalage et aller à l'état 161
    '+'  décalage et aller à l'état 162


État 156

   27 optimization1_1: assignment_expression .

    $défaut  réduction par utilisation de la règle 27 (optimization1_1)


État 157

   25 optimization1_1: primary_expression . '*' IDENTIFIER '[' IDENTIFIER ']'
   32 postfix_expression: primary_expression .

    '*'  décalage et aller à l'état 163

    '*'       [réduction par utilisation de la règle 32 (postfix_expression)]
    $défaut  réduction par utilisation de la règle 32 (postfix_expression)


État 158

    8 vec_swap: type_specifier IDENTIFIER assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER . ']' assignment_operator IDENTIFIER ';'

    ']'  décalage et aller à l'état 164


État 159

   11 level2: a a a a a a a a a a a a a a a FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' . IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@2 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}'

    IDENTIFIER  décalage et aller à l'état 165


État 160

   23 optimization1_1: IDENTIFIER '[' . IDENTIFIER ']' '*' primary_expression
   24                | IDENTIFIER '[' . IDENTIFIER ']'

    IDENTIFIER  décalage et aller à l'état 166


État 161

   12 level1_1: a a a a a a a a a a a a a a a IDENTIFIER '[' IDENTIFIER ']' assignment_operator optimization1_1 ';' .

    $défaut  réduction par utilisation de la règle 12 (level1_1)


État 162

   26 optimization1_1: optimization1_1 '+' . optimization1_1

    CONST_INT    décalage et aller à l'état 9
    CONST_FLOAT  décalage et aller à l'état 10
    IDENTIFIER   décalage et aller à l'état 154
    '('          décalage et aller à l'état 12
    INC          décalage et aller à l'état 13
    DEC          décalage et aller à l'état 14

    optimization1_1            aller à l'état 167
    postfix_expression         aller à l'état 15
    unary_expression           aller à l'état 16
    multiplicative_expression  aller à l'état 17
    additive_expression        aller à l'état 18
    shift_expression           aller à l'état 19
    relational_expression      aller à l'état 20
    equality_expression        aller à l'état 21
    and_expression             aller à l'état 22
    exclusive_or_expression    aller à l'état 23
    inclusive_or_expression    aller à l'état 24
    logical_and_expression     aller à l'état 25
    logical_or_expression      aller à l'état 26
    assignment_expression      aller à l'état 156
    primary_expression         aller à l'état 157


État 163

   25 optimization1_1: primary_expression '*' . IDENTIFIER '[' IDENTIFIER ']'

    IDENTIFIER  décalage et aller à l'état 168


État 164

    8 vec_swap: type_specifier IDENTIFIER assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER ']' . assignment_operator IDENTIFIER ';'

    '='  décalage et aller à l'état 37

    assignment_operator  aller à l'état 169


État 165

   11 level2: a a a a a a a a a a a a a a a FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER . comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@2 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}'

    '<'    décalage et aller à l'état 87
    LE_OP  décalage et aller à l'état 88

    comp_op  aller à l'état 170


État 166

   23 optimization1_1: IDENTIFIER '[' IDENTIFIER . ']' '*' primary_expression
   24                | IDENTIFIER '[' IDENTIFIER . ']'

    ']'  décalage et aller à l'état 171


État 167

   26 optimization1_1: optimization1_1 . '+' optimization1_1
   26                | optimization1_1 '+' optimization1_1 .

    '+'  décalage et aller à l'état 162

    '+'       [réduction par utilisation de la règle 26 (optimization1_1)]
    $défaut  réduction par utilisation de la règle 26 (optimization1_1)


État 168

   25 optimization1_1: primary_expression '*' IDENTIFIER . '[' IDENTIFIER ']'

    '['  décalage et aller à l'état 172


État 169

    8 vec_swap: type_specifier IDENTIFIER assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator . IDENTIFIER ';'

    IDENTIFIER  décalage et aller à l'état 173


État 170

   11 level2: a a a a a a a a a a a a a a a FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op . shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@2 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}'

    CONST_INT    décalage et aller à l'état 9
    CONST_FLOAT  décalage et aller à l'état 10
    IDENTIFIER   décalage et aller à l'état 11
    '('          décalage et aller à l'état 12
    INC          décalage et aller à l'état 13
    DEC          décalage et aller à l'état 14

    postfix_expression         aller à l'état 15
    unary_expression           aller à l'état 66
    multiplicative_expression  aller à l'état 17
    additive_expression        aller à l'état 18
    shift_expression           aller à l'état 174
    primary_expression         aller à l'état 28


État 171

   23 optimization1_1: IDENTIFIER '[' IDENTIFIER ']' . '*' primary_expression
   24                | IDENTIFIER '[' IDENTIFIER ']' .

    '*'  décalage et aller à l'état 175

    $défaut  réduction par utilisation de la règle 24 (optimization1_1)


État 172

   25 optimization1_1: primary_expression '*' IDENTIFIER '[' . IDENTIFIER ']'

    IDENTIFIER  décalage et aller à l'état 176


État 173

    8 vec_swap: type_specifier IDENTIFIER assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER . ';'

    ';'  décalage et aller à l'état 177


État 174

   11 level2: a a a a a a a a a a a a a a a FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression . ';' IDENTIFIER INC ')' '{' IDENTIFIER $@2 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}'
   48 shift_expression: shift_expression . LEFT_OP additive_expression
   49                 | shift_expression . RIGHT_OP additive_expression

    ';'       décalage et aller à l'état 178
    LEFT_OP   décalage et aller à l'état 44
    RIGHT_OP  décalage et aller à l'état 45


État 175

   23 optimization1_1: IDENTIFIER '[' IDENTIFIER ']' '*' . primary_expression

    CONST_INT    décalage et aller à l'état 9
    CONST_FLOAT  décalage et aller à l'état 10
    IDENTIFIER   décalage et aller à l'état 11
    '('          décalage et aller à l'état 12

    primary_expression  aller à l'état 179


État 176

   25 optimization1_1: primary_expression '*' IDENTIFIER '[' IDENTIFIER . ']'

    ']'  décalage et aller à l'état 180


État 177

    8 vec_swap: type_specifier IDENTIFIER assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER '[' IDENTIFIER ']' ';' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER ';' .

    $défaut  réduction par utilisation de la règle 8 (vec_swap)


État 178

   11 level2: a a a a a a a a a a a a a a a FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' . IDENTIFIER INC ')' '{' IDENTIFIER $@2 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}'

    IDENTIFIER  décalage et aller à l'état 181


État 179

   23 optimization1_1: IDENTIFIER '[' IDENTIFIER ']' '*' primary_expression .

    $défaut  réduction par utilisation de la règle 23 (optimization1_1)


État 180

   25 optimization1_1: primary_expression '*' IDENTIFIER '[' IDENTIFIER ']' .

    $défaut  réduction par utilisation de la règle 25 (optimization1_1)


État 181

   11 level2: a a a a a a a a a a a a a a a FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER . INC ')' '{' IDENTIFIER $@2 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}'

    INC  décalage et aller à l'état 182


État 182

   11 level2: a a a a a a a a a a a a a a a FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC . ')' '{' IDENTIFIER $@2 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}'

    ')'  décalage et aller à l'état 183


État 183

   11 level2: a a a a a a a a a a a a a a a FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' . '{' IDENTIFIER $@2 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}'

    '{'  décalage et aller à l'état 184


État 184

   11 level2: a a a a a a a a a a a a a a a FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' . IDENTIFIER $@2 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}'

    IDENTIFIER  décalage et aller à l'état 185


État 185

   11 level2: a a a a a a a a a a a a a a a FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER . $@2 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}'

    $défaut  réduction par utilisation de la règle 10 ($@2)

    $@2  aller à l'état 186


État 186

   11 level2: a a a a a a a a a a a a a a a FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@2 . '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}'

    '['  décalage et aller à l'état 187


État 187

   11 level2: a a a a a a a a a a a a a a a FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@2 '[' . IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}'

    IDENTIFIER  décalage et aller à l'état 188


État 188

   11 level2: a a a a a a a a a a a a a a a FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@2 '[' IDENTIFIER . ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}'

    ']'  décalage et aller à l'état 189


État 189

   11 level2: a a a a a a a a a a a a a a a FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@2 '[' IDENTIFIER ']' . '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}'

    '['  décalage et aller à l'état 190


État 190

   11 level2: a a a a a a a a a a a a a a a FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@2 '[' IDENTIFIER ']' '[' . IDENTIFIER ']' assignment_operator optimization2_1 ';' '}'

    IDENTIFIER  décalage et aller à l'état 191


État 191

   11 level2: a a a a a a a a a a a a a a a FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@2 '[' IDENTIFIER ']' '[' IDENTIFIER . ']' assignment_operator optimization2_1 ';' '}'

    ']'  décalage et aller à l'état 192


État 192

   11 level2: a a a a a a a a a a a a a a a FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@2 '[' IDENTIFIER ']' '[' IDENTIFIER ']' . assignment_operator optimization2_1 ';' '}'

    '='  décalage et aller à l'état 37

    assignment_operator  aller à l'état 193


État 193

   11 level2: a a a a a a a a a a a a a a a FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@2 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator . optimization2_1 ';' '}'

    CONST_INT    décalage et aller à l'état 9
    CONST_FLOAT  décalage et aller à l'état 10
    IDENTIFIER   décalage et aller à l'état 194
    '('          décalage et aller à l'état 12
    INC          décalage et aller à l'état 13
    DEC          décalage et aller à l'état 14

    optimization2_1            aller à l'état 195
    expression                 aller à l'état 196
    postfix_expression         aller à l'état 15
    unary_expression           aller à l'état 16
    multiplicative_expression  aller à l'état 17
    additive_expression        aller à l'état 18
    shift_expression           aller à l'état 19
    relational_expression      aller à l'état 20
    equality_expression        aller à l'état 21
    and_expression             aller à l'état 22
    exclusive_or_expression    aller à l'état 23
    inclusive_or_expression    aller à l'état 24
    logical_and_expression     aller à l'état 25
    logical_or_expression      aller à l'état 26
    assignment_expression      aller à l'état 30
    primary_expression         aller à l'état 197


État 194

   19 optimization2_1: IDENTIFIER . '[' IDENTIFIER ']' '[' IDENTIFIER ']'
   20                | IDENTIFIER . '[' IDENTIFIER ']' '[' IDENTIFIER ']' '*' primary_expression
   74 primary_expression: IDENTIFIER .

    '['  décalage et aller à l'état 198

    '['       [réduction par utilisation de la règle 74 (primary_expression)]
    $défaut  réduction par utilisation de la règle 74 (primary_expression)


État 195

   11 level2: a a a a a a a a a a a a a a a FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@2 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 . ';' '}'

    ';'  décalage et aller à l'état 199


État 196

   22 optimization2_1: expression .
   31 expression: expression . ',' assignment_expression

    ','  décalage et aller à l'état 59

    $défaut  réduction par utilisation de la règle 22 (optimization2_1)


État 197

   21 optimization2_1: primary_expression . '*' IDENTIFIER '[' IDENTIFIER ']' '[' IDENTIFIER ']'
   32 postfix_expression: primary_expression .

    '*'  décalage et aller à l'état 200

    '*'       [réduction par utilisation de la règle 32 (postfix_expression)]
    $défaut  réduction par utilisation de la règle 32 (postfix_expression)


État 198

   19 optimization2_1: IDENTIFIER '[' . IDENTIFIER ']' '[' IDENTIFIER ']'
   20                | IDENTIFIER '[' . IDENTIFIER ']' '[' IDENTIFIER ']' '*' primary_expression

    IDENTIFIER  décalage et aller à l'état 201


État 199

   11 level2: a a a a a a a a a a a a a a a FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@2 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' . '}'

    '}'  décalage et aller à l'état 202


État 200

   21 optimization2_1: primary_expression '*' . IDENTIFIER '[' IDENTIFIER ']' '[' IDENTIFIER ']'

    IDENTIFIER  décalage et aller à l'état 203


État 201

   19 optimization2_1: IDENTIFIER '[' IDENTIFIER . ']' '[' IDENTIFIER ']'
   20                | IDENTIFIER '[' IDENTIFIER . ']' '[' IDENTIFIER ']' '*' primary_expression

    ']'  décalage et aller à l'état 204


État 202

   11 level2: a a a a a a a a a a a a a a a FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@2 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}' .

    $défaut  réduction par utilisation de la règle 11 (level2)


État 203

   21 optimization2_1: primary_expression '*' IDENTIFIER . '[' IDENTIFIER ']' '[' IDENTIFIER ']'

    '['  décalage et aller à l'état 205


État 204

   19 optimization2_1: IDENTIFIER '[' IDENTIFIER ']' . '[' IDENTIFIER ']'
   20                | IDENTIFIER '[' IDENTIFIER ']' . '[' IDENTIFIER ']' '*' primary_expression

    '['  décalage et aller à l'état 206


État 205

   21 optimization2_1: primary_expression '*' IDENTIFIER '[' . IDENTIFIER ']' '[' IDENTIFIER ']'

    IDENTIFIER  décalage et aller à l'état 207


État 206

   19 optimization2_1: IDENTIFIER '[' IDENTIFIER ']' '[' . IDENTIFIER ']'
   20                | IDENTIFIER '[' IDENTIFIER ']' '[' . IDENTIFIER ']' '*' primary_expression

    IDENTIFIER  décalage et aller à l'état 208


État 207

   21 optimization2_1: primary_expression '*' IDENTIFIER '[' IDENTIFIER . ']' '[' IDENTIFIER ']'

    ']'  décalage et aller à l'état 209


État 208

   19 optimization2_1: IDENTIFIER '[' IDENTIFIER ']' '[' IDENTIFIER . ']'
   20                | IDENTIFIER '[' IDENTIFIER ']' '[' IDENTIFIER . ']' '*' primary_expression

    ']'  décalage et aller à l'état 210


État 209

   21 optimization2_1: primary_expression '*' IDENTIFIER '[' IDENTIFIER ']' . '[' IDENTIFIER ']'

    '['  décalage et aller à l'état 211


État 210

   19 optimization2_1: IDENTIFIER '[' IDENTIFIER ']' '[' IDENTIFIER ']' .
   20                | IDENTIFIER '[' IDENTIFIER ']' '[' IDENTIFIER ']' . '*' primary_expression

    '*'  décalage et aller à l'état 212

    $défaut  réduction par utilisation de la règle 19 (optimization2_1)


État 211

   21 optimization2_1: primary_expression '*' IDENTIFIER '[' IDENTIFIER ']' '[' . IDENTIFIER ']'

    IDENTIFIER  décalage et aller à l'état 213


État 212

   20 optimization2_1: IDENTIFIER '[' IDENTIFIER ']' '[' IDENTIFIER ']' '*' . primary_expression

    CONST_INT    décalage et aller à l'état 9
    CONST_FLOAT  décalage et aller à l'état 10
    IDENTIFIER   décalage et aller à l'état 11
    '('          décalage et aller à l'état 12

    primary_expression  aller à l'état 214


État 213

   21 optimization2_1: primary_expression '*' IDENTIFIER '[' IDENTIFIER ']' '[' IDENTIFIER . ']'

    ']'  décalage et aller à l'état 215


État 214

   20 optimization2_1: IDENTIFIER '[' IDENTIFIER ']' '[' IDENTIFIER ']' '*' primary_expression .

    $défaut  réduction par utilisation de la règle 20 (optimization2_1)


État 215

   21 optimization2_1: primary_expression '*' IDENTIFIER '[' IDENTIFIER ']' '[' IDENTIFIER ']' .

    $défaut  réduction par utilisation de la règle 21 (optimization2_1)
