Non-terminaux inutiles dans la grammaire

   rule11
   sscale
   compound_statement
   statement_list
   statement
   expression_statement
   selection_statement
   iteration_statement
   $@5
   iter_counter
   declaration_list
   declaration
   declaration_specifiers
   type_specifier
   init_declarator_list
   init_declarator
   declarator
   direct_declarator
   pointer
   initializer
   initializer_list


Terminaux inutilisés dans la grammaire

   INT
   VOID
   FLOAT
   WHILE
   DO
   IF
   ELSE
   RETURN
   CONST_Q
   STRING
   CONST


Règles inutiles dans la grammaire

   63 rule11: FOR '(' IDENTIFIER '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER '[' IDENTIFIER ']' assignment_operator IDENTIFIER '[' IDENTIFIER ']' sscale ';' '}'

   64 sscale: '*' primary_expression
   65       | %empty

   66 compound_statement: '{' '}'
   67                   | '{' statement_list '}'
   68                   | '{' declaration_list '}'
   69                   | '{' declaration_list statement_list '}'

   70 statement_list: statement
   71               | statement_list statement

   72 statement: compound_statement
   73          | expression_statement
   74          | selection_statement
   75          | iteration_statement

   76 expression_statement: ';'
   77                     | expression ';'

   78 selection_statement: IF '(' expression ')' compound_statement
   79                    | IF '(' expression ')' compound_statement ELSE compound_statement

   80 $@5: %empty

   81 iteration_statement: WHILE $@5 '(' expression ')' compound_statement
   82                    | FOR '(' expression_statement expression_statement expression ')' compound_statement

   83 iter_counter: %empty

   84 declaration_list: declaration
   85                 | declaration_list declaration

   86 declaration: declaration_specifiers init_declarator_list ';'

   87 declaration_specifiers: type_specifier

   88 type_specifier: VOID
   89               | INT
   90               | FLOAT

   91 init_declarator_list: init_declarator
   92                     | init_declarator_list ',' init_declarator

   93 init_declarator: declarator
   94                | declarator '=' initializer

   95 declarator: pointer direct_declarator
   96           | direct_declarator

   97 direct_declarator: IDENTIFIER
   98                  | direct_declarator '[' CONST_INT ']'

   99 pointer: '*'
  100        | '*' pointer

  101 initializer: assignment_expression
  102            | '{' initializer_list '}'

  103 initializer_list: initializer
  104                 | initializer_list ',' initializer


La règle est inutile dans l'analyseur à cause de conflits

    7 $@4: %empty


État 7 conflits: 1 réduction/réduction
État 21 conflits: 1 décalage/réduction
État 74 conflits: 1 décalage/réduction
État 75 conflits: 1 décalage/réduction
État 118 conflits: 1 décalage/réduction
État 121 conflits: 1 décalage/réduction
État 130 conflits: 1 décalage/réduction


Grammaire

    0 $accept: optimizer_start $end

    1 optimizer_start: optimization1
    2                | optimization2

    3 $@1: %empty

    4 $@2: %empty

    5 $@3: %empty

    6 optimization2: FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' FOR '(' IDENTIFIER $@2 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@3 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}' '}'

    7 $@4: %empty

    8 optimization1: FOR '(' IDENTIFIER $@4 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER '[' IDENTIFIER ']' assignment_operator optimization1_1 ';' '}'

    9 optimization2_1: IDENTIFIER '[' IDENTIFIER ']' '[' IDENTIFIER ']'
   10                | IDENTIFIER '[' IDENTIFIER ']' '[' IDENTIFIER ']' '*' primary_expression

   11 optimization1_1: IDENTIFIER '[' IDENTIFIER ']' '*' primary_expression
   12                | IDENTIFIER '[' IDENTIFIER ']'
   13                | primary_expression '*' IDENTIFIER '[' IDENTIFIER ']'
   14                | optimization1_1 '+' optimization1_1
   15                | assignment_expression

   16 comp_op: LE_OP
   17        | '<'

   18 expression: assignment_expression
   19           | expression ',' assignment_expression

   20 postfix_expression: primary_expression
   21                   | postfix_expression '[' expression ']'
   22                   | postfix_expression '(' ')'
   23                   | postfix_expression INC
   24                   | postfix_expression DEC

   25 unary_expression: postfix_expression
   26                 | INC unary_expression
   27                 | DEC unary_expression

   28 multiplicative_expression: unary_expression
   29                          | multiplicative_expression '*' unary_expression
   30                          | multiplicative_expression '/' unary_expression
   31                          | multiplicative_expression '%' unary_expression

   32 additive_expression: multiplicative_expression
   33                    | additive_expression '+' multiplicative_expression
   34                    | additive_expression '-' multiplicative_expression

   35 shift_expression: additive_expression
   36                 | shift_expression LEFT_OP additive_expression
   37                 | shift_expression RIGHT_OP additive_expression

   38 relational_expression: shift_expression
   39                      | relational_expression '<' shift_expression
   40                      | relational_expression '>' shift_expression
   41                      | relational_expression LE_OP shift_expression
   42                      | relational_expression GE_OP shift_expression

   43 equality_expression: relational_expression
   44                    | equality_expression EQ_OP relational_expression
   45                    | equality_expression NE_OP relational_expression

   46 and_expression: equality_expression
   47               | and_expression '&' equality_expression

   48 exclusive_or_expression: and_expression
   49                        | exclusive_or_expression '^' and_expression

   50 inclusive_or_expression: exclusive_or_expression
   51                        | inclusive_or_expression '|' exclusive_or_expression

   52 logical_and_expression: inclusive_or_expression
   53                       | logical_and_expression AND_OP inclusive_or_expression

   54 logical_or_expression: logical_and_expression
   55                      | logical_or_expression OR_OP logical_and_expression

   56 assignment_expression: logical_or_expression
   57                      | unary_expression assignment_operator assignment_expression

   58 assignment_operator: '='

   59 primary_expression: IDENTIFIER
   60                   | CONST_INT
   61                   | CONST_FLOAT
   62                   | '(' expression ')'


Terminaux, suivis des règles où ils apparaissent

$end (0) 0
'%' (37) 31
'&' (38) 47
'(' (40) 6 8 22 62
')' (41) 6 8 22 62
'*' (42) 10 11 13 29
'+' (43) 14 33
',' (44) 19
'-' (45) 34
'/' (47) 30
';' (59) 6 8
'<' (60) 17 39
'=' (61) 6 8 58
'>' (62) 40
'[' (91) 6 8 9 10 11 12 13 21
']' (93) 6 8 9 10 11 12 13 21
'^' (94) 49
'{' (123) 6 8
'|' (124) 51
'}' (125) 6 8
error (256)
INT (258)
VOID (259)
FLOAT (260)
FOR (261) 6 8
WHILE (262)
DO (263)
IF (264)
ELSE (265)
RETURN (266)
CONST_Q (267)
CONST_INT <vv> (268) 60
CONST_FLOAT <vv> (269) 61
IDENTIFIER <vv> (270) 6 8 9 10 11 12 13 59
STRING <vv> (271)
CONST <vv> (272)
AND_OP (273) 53
OR_OP (274) 55
LE_OP (275) 16 41
GE_OP (276) 42
EQ_OP (277) 44
NE_OP (278) 45
INC (279) 6 8 23 26
DEC (280) 24 27
LEFT_OP (281) 36
RIGHT_OP (282) 37


Non-terminaux, suivis des règles où ils apparaissent

$accept (47)
    à gauche: 0
optimizer_start (48)
    à gauche: 1 2, à droite: 0
optimization2 (49)
    à gauche: 6, à droite: 2
$@1 (50)
    à gauche: 3, à droite: 6
$@2 (51)
    à gauche: 4, à droite: 6
$@3 (52)
    à gauche: 5, à droite: 6
optimization1 (53)
    à gauche: 8, à droite: 1
$@4 (54)
    à gauche: 7, à droite: 8
optimization2_1 <vv> (55)
    à gauche: 9 10, à droite: 6
optimization1_1 <vv> (56)
    à gauche: 11 12 13 14 15, à droite: 8 14
comp_op <zz> (57)
    à gauche: 16 17, à droite: 6 8
expression <vv> (58)
    à gauche: 18 19, à droite: 19 21 62
postfix_expression <vv> (59)
    à gauche: 20 21 22 23 24, à droite: 21 22 23 24 25
unary_expression <vv> (60)
    à gauche: 25 26 27, à droite: 26 27 28 29 30 31 57
multiplicative_expression <vv> (61)
    à gauche: 28 29 30 31, à droite: 29 30 31 32 33 34
additive_expression <vv> (62)
    à gauche: 32 33 34, à droite: 33 34 35 36 37
shift_expression <vv> (63)
    à gauche: 35 36 37, à droite: 6 8 36 37 38 39 40 41 42
relational_expression <vv> (64)
    à gauche: 38 39 40 41 42, à droite: 39 40 41 42 43 44 45
equality_expression <vv> (65)
    à gauche: 43 44 45, à droite: 44 45 46 47
and_expression <vv> (66)
    à gauche: 46 47, à droite: 47 48 49
exclusive_or_expression <vv> (67)
    à gauche: 48 49, à droite: 49 50 51
inclusive_or_expression <vv> (68)
    à gauche: 50 51, à droite: 51 52 53
logical_and_expression <vv> (69)
    à gauche: 52 53, à droite: 53 54 55
logical_or_expression <vv> (70)
    à gauche: 54 55, à droite: 55 56
assignment_expression <vv> (71)
    à gauche: 56 57, à droite: 6 8 15 18 19 57
assignment_operator <vv> (72)
    à gauche: 58, à droite: 6 8 57
primary_expression <vv> (73)
    à gauche: 59 60 61 62, à droite: 10 11 13 20


État 0

    0 $accept: . optimizer_start $end

    FOR  décalage et aller à l'état 1

    optimizer_start  aller à l'état 2
    optimization2    aller à l'état 3
    optimization1    aller à l'état 4


État 1

    6 optimization2: FOR . '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' FOR '(' IDENTIFIER $@2 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@3 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}' '}'
    8 optimization1: FOR . '(' IDENTIFIER $@4 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER '[' IDENTIFIER ']' assignment_operator optimization1_1 ';' '}'

    '('  décalage et aller à l'état 5


État 2

    0 $accept: optimizer_start . $end

    $end  décalage et aller à l'état 6


État 3

    2 optimizer_start: optimization2 .

    $défaut  réduction par utilisation de la règle 2 (optimizer_start)


État 4

    1 optimizer_start: optimization1 .

    $défaut  réduction par utilisation de la règle 1 (optimizer_start)


État 5

    6 optimization2: FOR '(' . IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' FOR '(' IDENTIFIER $@2 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@3 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}' '}'
    8 optimization1: FOR '(' . IDENTIFIER $@4 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER '[' IDENTIFIER ']' assignment_operator optimization1_1 ';' '}'

    IDENTIFIER  décalage et aller à l'état 7


État 6

    0 $accept: optimizer_start $end .

    $défaut  accepter


État 7

    6 optimization2: FOR '(' IDENTIFIER . $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' FOR '(' IDENTIFIER $@2 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@3 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}' '}'
    8 optimization1: FOR '(' IDENTIFIER . $@4 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER '[' IDENTIFIER ']' assignment_operator optimization1_1 ';' '}'

    '='       réduction par utilisation de la règle 3 ($@1)
    '='       [réduction par utilisation de la règle 7 ($@4)]
    $défaut  réduction par utilisation de la règle 3 ($@1)

    $@1  aller à l'état 8
    $@4  aller à l'état 9


État 8

    6 optimization2: FOR '(' IDENTIFIER $@1 . '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' FOR '(' IDENTIFIER $@2 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@3 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}' '}'

    '='  décalage et aller à l'état 10


État 9

    8 optimization1: FOR '(' IDENTIFIER $@4 . '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER '[' IDENTIFIER ']' assignment_operator optimization1_1 ';' '}'

    '='  décalage et aller à l'état 11


État 10

    6 optimization2: FOR '(' IDENTIFIER $@1 '=' . assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' FOR '(' IDENTIFIER $@2 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@3 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}' '}'

    CONST_INT    décalage et aller à l'état 12
    CONST_FLOAT  décalage et aller à l'état 13
    IDENTIFIER   décalage et aller à l'état 14
    '('          décalage et aller à l'état 15
    INC          décalage et aller à l'état 16
    DEC          décalage et aller à l'état 17

    postfix_expression         aller à l'état 18
    unary_expression           aller à l'état 19
    multiplicative_expression  aller à l'état 20
    additive_expression        aller à l'état 21
    shift_expression           aller à l'état 22
    relational_expression      aller à l'état 23
    equality_expression        aller à l'état 24
    and_expression             aller à l'état 25
    exclusive_or_expression    aller à l'état 26
    inclusive_or_expression    aller à l'état 27
    logical_and_expression     aller à l'état 28
    logical_or_expression      aller à l'état 29
    assignment_expression      aller à l'état 30
    primary_expression         aller à l'état 31


État 11

    8 optimization1: FOR '(' IDENTIFIER $@4 '=' . assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER '[' IDENTIFIER ']' assignment_operator optimization1_1 ';' '}'

    CONST_INT    décalage et aller à l'état 12
    CONST_FLOAT  décalage et aller à l'état 13
    IDENTIFIER   décalage et aller à l'état 14
    '('          décalage et aller à l'état 15
    INC          décalage et aller à l'état 16
    DEC          décalage et aller à l'état 17

    postfix_expression         aller à l'état 18
    unary_expression           aller à l'état 19
    multiplicative_expression  aller à l'état 20
    additive_expression        aller à l'état 21
    shift_expression           aller à l'état 22
    relational_expression      aller à l'état 23
    equality_expression        aller à l'état 24
    and_expression             aller à l'état 25
    exclusive_or_expression    aller à l'état 26
    inclusive_or_expression    aller à l'état 27
    logical_and_expression     aller à l'état 28
    logical_or_expression      aller à l'état 29
    assignment_expression      aller à l'état 32
    primary_expression         aller à l'état 31


État 12

   60 primary_expression: CONST_INT .

    $défaut  réduction par utilisation de la règle 60 (primary_expression)


État 13

   61 primary_expression: CONST_FLOAT .

    $défaut  réduction par utilisation de la règle 61 (primary_expression)


État 14

   59 primary_expression: IDENTIFIER .

    $défaut  réduction par utilisation de la règle 59 (primary_expression)


État 15

   62 primary_expression: '(' . expression ')'

    CONST_INT    décalage et aller à l'état 12
    CONST_FLOAT  décalage et aller à l'état 13
    IDENTIFIER   décalage et aller à l'état 14
    '('          décalage et aller à l'état 15
    INC          décalage et aller à l'état 16
    DEC          décalage et aller à l'état 17

    expression                 aller à l'état 33
    postfix_expression         aller à l'état 18
    unary_expression           aller à l'état 19
    multiplicative_expression  aller à l'état 20
    additive_expression        aller à l'état 21
    shift_expression           aller à l'état 22
    relational_expression      aller à l'état 23
    equality_expression        aller à l'état 24
    and_expression             aller à l'état 25
    exclusive_or_expression    aller à l'état 26
    inclusive_or_expression    aller à l'état 27
    logical_and_expression     aller à l'état 28
    logical_or_expression      aller à l'état 29
    assignment_expression      aller à l'état 34
    primary_expression         aller à l'état 31


État 16

   26 unary_expression: INC . unary_expression

    CONST_INT    décalage et aller à l'état 12
    CONST_FLOAT  décalage et aller à l'état 13
    IDENTIFIER   décalage et aller à l'état 14
    '('          décalage et aller à l'état 15
    INC          décalage et aller à l'état 16
    DEC          décalage et aller à l'état 17

    postfix_expression  aller à l'état 18
    unary_expression    aller à l'état 35
    primary_expression  aller à l'état 31


État 17

   27 unary_expression: DEC . unary_expression

    CONST_INT    décalage et aller à l'état 12
    CONST_FLOAT  décalage et aller à l'état 13
    IDENTIFIER   décalage et aller à l'état 14
    '('          décalage et aller à l'état 15
    INC          décalage et aller à l'état 16
    DEC          décalage et aller à l'état 17

    postfix_expression  aller à l'état 18
    unary_expression    aller à l'état 36
    primary_expression  aller à l'état 31


État 18

   21 postfix_expression: postfix_expression . '[' expression ']'
   22                   | postfix_expression . '(' ')'
   23                   | postfix_expression . INC
   24                   | postfix_expression . DEC
   25 unary_expression: postfix_expression .

    '('  décalage et aller à l'état 37
    '['  décalage et aller à l'état 38
    INC  décalage et aller à l'état 39
    DEC  décalage et aller à l'état 40

    $défaut  réduction par utilisation de la règle 25 (unary_expression)


État 19

   28 multiplicative_expression: unary_expression .
   57 assignment_expression: unary_expression . assignment_operator assignment_expression

    '='  décalage et aller à l'état 41

    $défaut  réduction par utilisation de la règle 28 (multiplicative_expression)

    assignment_operator  aller à l'état 42


État 20

   29 multiplicative_expression: multiplicative_expression . '*' unary_expression
   30                          | multiplicative_expression . '/' unary_expression
   31                          | multiplicative_expression . '%' unary_expression
   32 additive_expression: multiplicative_expression .

    '/'  décalage et aller à l'état 43
    '*'  décalage et aller à l'état 44
    '%'  décalage et aller à l'état 45

    $défaut  réduction par utilisation de la règle 32 (additive_expression)


État 21

   33 additive_expression: additive_expression . '+' multiplicative_expression
   34                    | additive_expression . '-' multiplicative_expression
   35 shift_expression: additive_expression .

    '+'  décalage et aller à l'état 46
    '-'  décalage et aller à l'état 47

    '+'       [réduction par utilisation de la règle 35 (shift_expression)]
    $défaut  réduction par utilisation de la règle 35 (shift_expression)


État 22

   36 shift_expression: shift_expression . LEFT_OP additive_expression
   37                 | shift_expression . RIGHT_OP additive_expression
   38 relational_expression: shift_expression .

    LEFT_OP   décalage et aller à l'état 48
    RIGHT_OP  décalage et aller à l'état 49

    $défaut  réduction par utilisation de la règle 38 (relational_expression)


État 23

   39 relational_expression: relational_expression . '<' shift_expression
   40                      | relational_expression . '>' shift_expression
   41                      | relational_expression . LE_OP shift_expression
   42                      | relational_expression . GE_OP shift_expression
   43 equality_expression: relational_expression .

    '<'    décalage et aller à l'état 50
    '>'    décalage et aller à l'état 51
    LE_OP  décalage et aller à l'état 52
    GE_OP  décalage et aller à l'état 53

    $défaut  réduction par utilisation de la règle 43 (equality_expression)


État 24

   44 equality_expression: equality_expression . EQ_OP relational_expression
   45                    | equality_expression . NE_OP relational_expression
   46 and_expression: equality_expression .

    EQ_OP  décalage et aller à l'état 54
    NE_OP  décalage et aller à l'état 55

    $défaut  réduction par utilisation de la règle 46 (and_expression)


État 25

   47 and_expression: and_expression . '&' equality_expression
   48 exclusive_or_expression: and_expression .

    '&'  décalage et aller à l'état 56

    $défaut  réduction par utilisation de la règle 48 (exclusive_or_expression)


État 26

   49 exclusive_or_expression: exclusive_or_expression . '^' and_expression
   50 inclusive_or_expression: exclusive_or_expression .

    '^'  décalage et aller à l'état 57

    $défaut  réduction par utilisation de la règle 50 (inclusive_or_expression)


État 27

   51 inclusive_or_expression: inclusive_or_expression . '|' exclusive_or_expression
   52 logical_and_expression: inclusive_or_expression .

    '|'  décalage et aller à l'état 58

    $défaut  réduction par utilisation de la règle 52 (logical_and_expression)


État 28

   53 logical_and_expression: logical_and_expression . AND_OP inclusive_or_expression
   54 logical_or_expression: logical_and_expression .

    AND_OP  décalage et aller à l'état 59

    $défaut  réduction par utilisation de la règle 54 (logical_or_expression)


État 29

   55 logical_or_expression: logical_or_expression . OR_OP logical_and_expression
   56 assignment_expression: logical_or_expression .

    OR_OP  décalage et aller à l'état 60

    $défaut  réduction par utilisation de la règle 56 (assignment_expression)


État 30

    6 optimization2: FOR '(' IDENTIFIER $@1 '=' assignment_expression . ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' FOR '(' IDENTIFIER $@2 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@3 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}' '}'

    ';'  décalage et aller à l'état 61


État 31

   20 postfix_expression: primary_expression .

    $défaut  réduction par utilisation de la règle 20 (postfix_expression)


État 32

    8 optimization1: FOR '(' IDENTIFIER $@4 '=' assignment_expression . ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER '[' IDENTIFIER ']' assignment_operator optimization1_1 ';' '}'

    ';'  décalage et aller à l'état 62


État 33

   19 expression: expression . ',' assignment_expression
   62 primary_expression: '(' expression . ')'

    ')'  décalage et aller à l'état 63
    ','  décalage et aller à l'état 64


État 34

   18 expression: assignment_expression .

    $défaut  réduction par utilisation de la règle 18 (expression)


État 35

   26 unary_expression: INC unary_expression .

    $défaut  réduction par utilisation de la règle 26 (unary_expression)


État 36

   27 unary_expression: DEC unary_expression .

    $défaut  réduction par utilisation de la règle 27 (unary_expression)


État 37

   22 postfix_expression: postfix_expression '(' . ')'

    ')'  décalage et aller à l'état 65


État 38

   21 postfix_expression: postfix_expression '[' . expression ']'

    CONST_INT    décalage et aller à l'état 12
    CONST_FLOAT  décalage et aller à l'état 13
    IDENTIFIER   décalage et aller à l'état 14
    '('          décalage et aller à l'état 15
    INC          décalage et aller à l'état 16
    DEC          décalage et aller à l'état 17

    expression                 aller à l'état 66
    postfix_expression         aller à l'état 18
    unary_expression           aller à l'état 19
    multiplicative_expression  aller à l'état 20
    additive_expression        aller à l'état 21
    shift_expression           aller à l'état 22
    relational_expression      aller à l'état 23
    equality_expression        aller à l'état 24
    and_expression             aller à l'état 25
    exclusive_or_expression    aller à l'état 26
    inclusive_or_expression    aller à l'état 27
    logical_and_expression     aller à l'état 28
    logical_or_expression      aller à l'état 29
    assignment_expression      aller à l'état 34
    primary_expression         aller à l'état 31


État 39

   23 postfix_expression: postfix_expression INC .

    $défaut  réduction par utilisation de la règle 23 (postfix_expression)


État 40

   24 postfix_expression: postfix_expression DEC .

    $défaut  réduction par utilisation de la règle 24 (postfix_expression)


État 41

   58 assignment_operator: '=' .

    $défaut  réduction par utilisation de la règle 58 (assignment_operator)


État 42

   57 assignment_expression: unary_expression assignment_operator . assignment_expression

    CONST_INT    décalage et aller à l'état 12
    CONST_FLOAT  décalage et aller à l'état 13
    IDENTIFIER   décalage et aller à l'état 14
    '('          décalage et aller à l'état 15
    INC          décalage et aller à l'état 16
    DEC          décalage et aller à l'état 17

    postfix_expression         aller à l'état 18
    unary_expression           aller à l'état 19
    multiplicative_expression  aller à l'état 20
    additive_expression        aller à l'état 21
    shift_expression           aller à l'état 22
    relational_expression      aller à l'état 23
    equality_expression        aller à l'état 24
    and_expression             aller à l'état 25
    exclusive_or_expression    aller à l'état 26
    inclusive_or_expression    aller à l'état 27
    logical_and_expression     aller à l'état 28
    logical_or_expression      aller à l'état 29
    assignment_expression      aller à l'état 67
    primary_expression         aller à l'état 31


État 43

   30 multiplicative_expression: multiplicative_expression '/' . unary_expression

    CONST_INT    décalage et aller à l'état 12
    CONST_FLOAT  décalage et aller à l'état 13
    IDENTIFIER   décalage et aller à l'état 14
    '('          décalage et aller à l'état 15
    INC          décalage et aller à l'état 16
    DEC          décalage et aller à l'état 17

    postfix_expression  aller à l'état 18
    unary_expression    aller à l'état 68
    primary_expression  aller à l'état 31


État 44

   29 multiplicative_expression: multiplicative_expression '*' . unary_expression

    CONST_INT    décalage et aller à l'état 12
    CONST_FLOAT  décalage et aller à l'état 13
    IDENTIFIER   décalage et aller à l'état 14
    '('          décalage et aller à l'état 15
    INC          décalage et aller à l'état 16
    DEC          décalage et aller à l'état 17

    postfix_expression  aller à l'état 18
    unary_expression    aller à l'état 69
    primary_expression  aller à l'état 31


État 45

   31 multiplicative_expression: multiplicative_expression '%' . unary_expression

    CONST_INT    décalage et aller à l'état 12
    CONST_FLOAT  décalage et aller à l'état 13
    IDENTIFIER   décalage et aller à l'état 14
    '('          décalage et aller à l'état 15
    INC          décalage et aller à l'état 16
    DEC          décalage et aller à l'état 17

    postfix_expression  aller à l'état 18
    unary_expression    aller à l'état 70
    primary_expression  aller à l'état 31


État 46

   33 additive_expression: additive_expression '+' . multiplicative_expression

    CONST_INT    décalage et aller à l'état 12
    CONST_FLOAT  décalage et aller à l'état 13
    IDENTIFIER   décalage et aller à l'état 14
    '('          décalage et aller à l'état 15
    INC          décalage et aller à l'état 16
    DEC          décalage et aller à l'état 17

    postfix_expression         aller à l'état 18
    unary_expression           aller à l'état 71
    multiplicative_expression  aller à l'état 72
    primary_expression         aller à l'état 31


État 47

   34 additive_expression: additive_expression '-' . multiplicative_expression

    CONST_INT    décalage et aller à l'état 12
    CONST_FLOAT  décalage et aller à l'état 13
    IDENTIFIER   décalage et aller à l'état 14
    '('          décalage et aller à l'état 15
    INC          décalage et aller à l'état 16
    DEC          décalage et aller à l'état 17

    postfix_expression         aller à l'état 18
    unary_expression           aller à l'état 71
    multiplicative_expression  aller à l'état 73
    primary_expression         aller à l'état 31


État 48

   36 shift_expression: shift_expression LEFT_OP . additive_expression

    CONST_INT    décalage et aller à l'état 12
    CONST_FLOAT  décalage et aller à l'état 13
    IDENTIFIER   décalage et aller à l'état 14
    '('          décalage et aller à l'état 15
    INC          décalage et aller à l'état 16
    DEC          décalage et aller à l'état 17

    postfix_expression         aller à l'état 18
    unary_expression           aller à l'état 71
    multiplicative_expression  aller à l'état 20
    additive_expression        aller à l'état 74
    primary_expression         aller à l'état 31


État 49

   37 shift_expression: shift_expression RIGHT_OP . additive_expression

    CONST_INT    décalage et aller à l'état 12
    CONST_FLOAT  décalage et aller à l'état 13
    IDENTIFIER   décalage et aller à l'état 14
    '('          décalage et aller à l'état 15
    INC          décalage et aller à l'état 16
    DEC          décalage et aller à l'état 17

    postfix_expression         aller à l'état 18
    unary_expression           aller à l'état 71
    multiplicative_expression  aller à l'état 20
    additive_expression        aller à l'état 75
    primary_expression         aller à l'état 31


État 50

   39 relational_expression: relational_expression '<' . shift_expression

    CONST_INT    décalage et aller à l'état 12
    CONST_FLOAT  décalage et aller à l'état 13
    IDENTIFIER   décalage et aller à l'état 14
    '('          décalage et aller à l'état 15
    INC          décalage et aller à l'état 16
    DEC          décalage et aller à l'état 17

    postfix_expression         aller à l'état 18
    unary_expression           aller à l'état 71
    multiplicative_expression  aller à l'état 20
    additive_expression        aller à l'état 21
    shift_expression           aller à l'état 76
    primary_expression         aller à l'état 31


État 51

   40 relational_expression: relational_expression '>' . shift_expression

    CONST_INT    décalage et aller à l'état 12
    CONST_FLOAT  décalage et aller à l'état 13
    IDENTIFIER   décalage et aller à l'état 14
    '('          décalage et aller à l'état 15
    INC          décalage et aller à l'état 16
    DEC          décalage et aller à l'état 17

    postfix_expression         aller à l'état 18
    unary_expression           aller à l'état 71
    multiplicative_expression  aller à l'état 20
    additive_expression        aller à l'état 21
    shift_expression           aller à l'état 77
    primary_expression         aller à l'état 31


État 52

   41 relational_expression: relational_expression LE_OP . shift_expression

    CONST_INT    décalage et aller à l'état 12
    CONST_FLOAT  décalage et aller à l'état 13
    IDENTIFIER   décalage et aller à l'état 14
    '('          décalage et aller à l'état 15
    INC          décalage et aller à l'état 16
    DEC          décalage et aller à l'état 17

    postfix_expression         aller à l'état 18
    unary_expression           aller à l'état 71
    multiplicative_expression  aller à l'état 20
    additive_expression        aller à l'état 21
    shift_expression           aller à l'état 78
    primary_expression         aller à l'état 31


État 53

   42 relational_expression: relational_expression GE_OP . shift_expression

    CONST_INT    décalage et aller à l'état 12
    CONST_FLOAT  décalage et aller à l'état 13
    IDENTIFIER   décalage et aller à l'état 14
    '('          décalage et aller à l'état 15
    INC          décalage et aller à l'état 16
    DEC          décalage et aller à l'état 17

    postfix_expression         aller à l'état 18
    unary_expression           aller à l'état 71
    multiplicative_expression  aller à l'état 20
    additive_expression        aller à l'état 21
    shift_expression           aller à l'état 79
    primary_expression         aller à l'état 31


État 54

   44 equality_expression: equality_expression EQ_OP . relational_expression

    CONST_INT    décalage et aller à l'état 12
    CONST_FLOAT  décalage et aller à l'état 13
    IDENTIFIER   décalage et aller à l'état 14
    '('          décalage et aller à l'état 15
    INC          décalage et aller à l'état 16
    DEC          décalage et aller à l'état 17

    postfix_expression         aller à l'état 18
    unary_expression           aller à l'état 71
    multiplicative_expression  aller à l'état 20
    additive_expression        aller à l'état 21
    shift_expression           aller à l'état 22
    relational_expression      aller à l'état 80
    primary_expression         aller à l'état 31


État 55

   45 equality_expression: equality_expression NE_OP . relational_expression

    CONST_INT    décalage et aller à l'état 12
    CONST_FLOAT  décalage et aller à l'état 13
    IDENTIFIER   décalage et aller à l'état 14
    '('          décalage et aller à l'état 15
    INC          décalage et aller à l'état 16
    DEC          décalage et aller à l'état 17

    postfix_expression         aller à l'état 18
    unary_expression           aller à l'état 71
    multiplicative_expression  aller à l'état 20
    additive_expression        aller à l'état 21
    shift_expression           aller à l'état 22
    relational_expression      aller à l'état 81
    primary_expression         aller à l'état 31


État 56

   47 and_expression: and_expression '&' . equality_expression

    CONST_INT    décalage et aller à l'état 12
    CONST_FLOAT  décalage et aller à l'état 13
    IDENTIFIER   décalage et aller à l'état 14
    '('          décalage et aller à l'état 15
    INC          décalage et aller à l'état 16
    DEC          décalage et aller à l'état 17

    postfix_expression         aller à l'état 18
    unary_expression           aller à l'état 71
    multiplicative_expression  aller à l'état 20
    additive_expression        aller à l'état 21
    shift_expression           aller à l'état 22
    relational_expression      aller à l'état 23
    equality_expression        aller à l'état 82
    primary_expression         aller à l'état 31


État 57

   49 exclusive_or_expression: exclusive_or_expression '^' . and_expression

    CONST_INT    décalage et aller à l'état 12
    CONST_FLOAT  décalage et aller à l'état 13
    IDENTIFIER   décalage et aller à l'état 14
    '('          décalage et aller à l'état 15
    INC          décalage et aller à l'état 16
    DEC          décalage et aller à l'état 17

    postfix_expression         aller à l'état 18
    unary_expression           aller à l'état 71
    multiplicative_expression  aller à l'état 20
    additive_expression        aller à l'état 21
    shift_expression           aller à l'état 22
    relational_expression      aller à l'état 23
    equality_expression        aller à l'état 24
    and_expression             aller à l'état 83
    primary_expression         aller à l'état 31


État 58

   51 inclusive_or_expression: inclusive_or_expression '|' . exclusive_or_expression

    CONST_INT    décalage et aller à l'état 12
    CONST_FLOAT  décalage et aller à l'état 13
    IDENTIFIER   décalage et aller à l'état 14
    '('          décalage et aller à l'état 15
    INC          décalage et aller à l'état 16
    DEC          décalage et aller à l'état 17

    postfix_expression         aller à l'état 18
    unary_expression           aller à l'état 71
    multiplicative_expression  aller à l'état 20
    additive_expression        aller à l'état 21
    shift_expression           aller à l'état 22
    relational_expression      aller à l'état 23
    equality_expression        aller à l'état 24
    and_expression             aller à l'état 25
    exclusive_or_expression    aller à l'état 84
    primary_expression         aller à l'état 31


État 59

   53 logical_and_expression: logical_and_expression AND_OP . inclusive_or_expression

    CONST_INT    décalage et aller à l'état 12
    CONST_FLOAT  décalage et aller à l'état 13
    IDENTIFIER   décalage et aller à l'état 14
    '('          décalage et aller à l'état 15
    INC          décalage et aller à l'état 16
    DEC          décalage et aller à l'état 17

    postfix_expression         aller à l'état 18
    unary_expression           aller à l'état 71
    multiplicative_expression  aller à l'état 20
    additive_expression        aller à l'état 21
    shift_expression           aller à l'état 22
    relational_expression      aller à l'état 23
    equality_expression        aller à l'état 24
    and_expression             aller à l'état 25
    exclusive_or_expression    aller à l'état 26
    inclusive_or_expression    aller à l'état 85
    primary_expression         aller à l'état 31


État 60

   55 logical_or_expression: logical_or_expression OR_OP . logical_and_expression

    CONST_INT    décalage et aller à l'état 12
    CONST_FLOAT  décalage et aller à l'état 13
    IDENTIFIER   décalage et aller à l'état 14
    '('          décalage et aller à l'état 15
    INC          décalage et aller à l'état 16
    DEC          décalage et aller à l'état 17

    postfix_expression         aller à l'état 18
    unary_expression           aller à l'état 71
    multiplicative_expression  aller à l'état 20
    additive_expression        aller à l'état 21
    shift_expression           aller à l'état 22
    relational_expression      aller à l'état 23
    equality_expression        aller à l'état 24
    and_expression             aller à l'état 25
    exclusive_or_expression    aller à l'état 26
    inclusive_or_expression    aller à l'état 27
    logical_and_expression     aller à l'état 86
    primary_expression         aller à l'état 31


État 61

    6 optimization2: FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' . IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' FOR '(' IDENTIFIER $@2 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@3 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}' '}'

    IDENTIFIER  décalage et aller à l'état 87


État 62

    8 optimization1: FOR '(' IDENTIFIER $@4 '=' assignment_expression ';' . IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER '[' IDENTIFIER ']' assignment_operator optimization1_1 ';' '}'

    IDENTIFIER  décalage et aller à l'état 88


État 63

   62 primary_expression: '(' expression ')' .

    $défaut  réduction par utilisation de la règle 62 (primary_expression)


État 64

   19 expression: expression ',' . assignment_expression

    CONST_INT    décalage et aller à l'état 12
    CONST_FLOAT  décalage et aller à l'état 13
    IDENTIFIER   décalage et aller à l'état 14
    '('          décalage et aller à l'état 15
    INC          décalage et aller à l'état 16
    DEC          décalage et aller à l'état 17

    postfix_expression         aller à l'état 18
    unary_expression           aller à l'état 19
    multiplicative_expression  aller à l'état 20
    additive_expression        aller à l'état 21
    shift_expression           aller à l'état 22
    relational_expression      aller à l'état 23
    equality_expression        aller à l'état 24
    and_expression             aller à l'état 25
    exclusive_or_expression    aller à l'état 26
    inclusive_or_expression    aller à l'état 27
    logical_and_expression     aller à l'état 28
    logical_or_expression      aller à l'état 29
    assignment_expression      aller à l'état 89
    primary_expression         aller à l'état 31


État 65

   22 postfix_expression: postfix_expression '(' ')' .

    $défaut  réduction par utilisation de la règle 22 (postfix_expression)


État 66

   19 expression: expression . ',' assignment_expression
   21 postfix_expression: postfix_expression '[' expression . ']'

    ']'  décalage et aller à l'état 90
    ','  décalage et aller à l'état 64


État 67

   57 assignment_expression: unary_expression assignment_operator assignment_expression .

    $défaut  réduction par utilisation de la règle 57 (assignment_expression)


État 68

   30 multiplicative_expression: multiplicative_expression '/' unary_expression .

    $défaut  réduction par utilisation de la règle 30 (multiplicative_expression)


État 69

   29 multiplicative_expression: multiplicative_expression '*' unary_expression .

    $défaut  réduction par utilisation de la règle 29 (multiplicative_expression)


État 70

   31 multiplicative_expression: multiplicative_expression '%' unary_expression .

    $défaut  réduction par utilisation de la règle 31 (multiplicative_expression)


État 71

   28 multiplicative_expression: unary_expression .

    $défaut  réduction par utilisation de la règle 28 (multiplicative_expression)


État 72

   29 multiplicative_expression: multiplicative_expression . '*' unary_expression
   30                          | multiplicative_expression . '/' unary_expression
   31                          | multiplicative_expression . '%' unary_expression
   33 additive_expression: additive_expression '+' multiplicative_expression .

    '/'  décalage et aller à l'état 43
    '*'  décalage et aller à l'état 44
    '%'  décalage et aller à l'état 45

    $défaut  réduction par utilisation de la règle 33 (additive_expression)


État 73

   29 multiplicative_expression: multiplicative_expression . '*' unary_expression
   30                          | multiplicative_expression . '/' unary_expression
   31                          | multiplicative_expression . '%' unary_expression
   34 additive_expression: additive_expression '-' multiplicative_expression .

    '/'  décalage et aller à l'état 43
    '*'  décalage et aller à l'état 44
    '%'  décalage et aller à l'état 45

    $défaut  réduction par utilisation de la règle 34 (additive_expression)


État 74

   33 additive_expression: additive_expression . '+' multiplicative_expression
   34                    | additive_expression . '-' multiplicative_expression
   36 shift_expression: shift_expression LEFT_OP additive_expression .

    '+'  décalage et aller à l'état 46
    '-'  décalage et aller à l'état 47

    '+'       [réduction par utilisation de la règle 36 (shift_expression)]
    $défaut  réduction par utilisation de la règle 36 (shift_expression)


État 75

   33 additive_expression: additive_expression . '+' multiplicative_expression
   34                    | additive_expression . '-' multiplicative_expression
   37 shift_expression: shift_expression RIGHT_OP additive_expression .

    '+'  décalage et aller à l'état 46
    '-'  décalage et aller à l'état 47

    '+'       [réduction par utilisation de la règle 37 (shift_expression)]
    $défaut  réduction par utilisation de la règle 37 (shift_expression)


État 76

   36 shift_expression: shift_expression . LEFT_OP additive_expression
   37                 | shift_expression . RIGHT_OP additive_expression
   39 relational_expression: relational_expression '<' shift_expression .

    LEFT_OP   décalage et aller à l'état 48
    RIGHT_OP  décalage et aller à l'état 49

    $défaut  réduction par utilisation de la règle 39 (relational_expression)


État 77

   36 shift_expression: shift_expression . LEFT_OP additive_expression
   37                 | shift_expression . RIGHT_OP additive_expression
   40 relational_expression: relational_expression '>' shift_expression .

    LEFT_OP   décalage et aller à l'état 48
    RIGHT_OP  décalage et aller à l'état 49

    $défaut  réduction par utilisation de la règle 40 (relational_expression)


État 78

   36 shift_expression: shift_expression . LEFT_OP additive_expression
   37                 | shift_expression . RIGHT_OP additive_expression
   41 relational_expression: relational_expression LE_OP shift_expression .

    LEFT_OP   décalage et aller à l'état 48
    RIGHT_OP  décalage et aller à l'état 49

    $défaut  réduction par utilisation de la règle 41 (relational_expression)


État 79

   36 shift_expression: shift_expression . LEFT_OP additive_expression
   37                 | shift_expression . RIGHT_OP additive_expression
   42 relational_expression: relational_expression GE_OP shift_expression .

    LEFT_OP   décalage et aller à l'état 48
    RIGHT_OP  décalage et aller à l'état 49

    $défaut  réduction par utilisation de la règle 42 (relational_expression)


État 80

   39 relational_expression: relational_expression . '<' shift_expression
   40                      | relational_expression . '>' shift_expression
   41                      | relational_expression . LE_OP shift_expression
   42                      | relational_expression . GE_OP shift_expression
   44 equality_expression: equality_expression EQ_OP relational_expression .

    '<'    décalage et aller à l'état 50
    '>'    décalage et aller à l'état 51
    LE_OP  décalage et aller à l'état 52
    GE_OP  décalage et aller à l'état 53

    $défaut  réduction par utilisation de la règle 44 (equality_expression)


État 81

   39 relational_expression: relational_expression . '<' shift_expression
   40                      | relational_expression . '>' shift_expression
   41                      | relational_expression . LE_OP shift_expression
   42                      | relational_expression . GE_OP shift_expression
   45 equality_expression: equality_expression NE_OP relational_expression .

    '<'    décalage et aller à l'état 50
    '>'    décalage et aller à l'état 51
    LE_OP  décalage et aller à l'état 52
    GE_OP  décalage et aller à l'état 53

    $défaut  réduction par utilisation de la règle 45 (equality_expression)


État 82

   44 equality_expression: equality_expression . EQ_OP relational_expression
   45                    | equality_expression . NE_OP relational_expression
   47 and_expression: and_expression '&' equality_expression .

    EQ_OP  décalage et aller à l'état 54
    NE_OP  décalage et aller à l'état 55

    $défaut  réduction par utilisation de la règle 47 (and_expression)


État 83

   47 and_expression: and_expression . '&' equality_expression
   49 exclusive_or_expression: exclusive_or_expression '^' and_expression .

    '&'  décalage et aller à l'état 56

    $défaut  réduction par utilisation de la règle 49 (exclusive_or_expression)


État 84

   49 exclusive_or_expression: exclusive_or_expression . '^' and_expression
   51 inclusive_or_expression: inclusive_or_expression '|' exclusive_or_expression .

    '^'  décalage et aller à l'état 57

    $défaut  réduction par utilisation de la règle 51 (inclusive_or_expression)


État 85

   51 inclusive_or_expression: inclusive_or_expression . '|' exclusive_or_expression
   53 logical_and_expression: logical_and_expression AND_OP inclusive_or_expression .

    '|'  décalage et aller à l'état 58

    $défaut  réduction par utilisation de la règle 53 (logical_and_expression)


État 86

   53 logical_and_expression: logical_and_expression . AND_OP inclusive_or_expression
   55 logical_or_expression: logical_or_expression OR_OP logical_and_expression .

    AND_OP  décalage et aller à l'état 59

    $défaut  réduction par utilisation de la règle 55 (logical_or_expression)


État 87

    6 optimization2: FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER . comp_op shift_expression ';' IDENTIFIER INC ')' '{' FOR '(' IDENTIFIER $@2 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@3 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}' '}'

    '<'    décalage et aller à l'état 91
    LE_OP  décalage et aller à l'état 92

    comp_op  aller à l'état 93


État 88

    8 optimization1: FOR '(' IDENTIFIER $@4 '=' assignment_expression ';' IDENTIFIER . comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER '[' IDENTIFIER ']' assignment_operator optimization1_1 ';' '}'

    '<'    décalage et aller à l'état 91
    LE_OP  décalage et aller à l'état 92

    comp_op  aller à l'état 94


État 89

   19 expression: expression ',' assignment_expression .

    $défaut  réduction par utilisation de la règle 19 (expression)


État 90

   21 postfix_expression: postfix_expression '[' expression ']' .

    $défaut  réduction par utilisation de la règle 21 (postfix_expression)


État 91

   17 comp_op: '<' .

    $défaut  réduction par utilisation de la règle 17 (comp_op)


État 92

   16 comp_op: LE_OP .

    $défaut  réduction par utilisation de la règle 16 (comp_op)


État 93

    6 optimization2: FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op . shift_expression ';' IDENTIFIER INC ')' '{' FOR '(' IDENTIFIER $@2 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@3 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}' '}'

    CONST_INT    décalage et aller à l'état 12
    CONST_FLOAT  décalage et aller à l'état 13
    IDENTIFIER   décalage et aller à l'état 14
    '('          décalage et aller à l'état 15
    INC          décalage et aller à l'état 16
    DEC          décalage et aller à l'état 17

    postfix_expression         aller à l'état 18
    unary_expression           aller à l'état 71
    multiplicative_expression  aller à l'état 20
    additive_expression        aller à l'état 21
    shift_expression           aller à l'état 95
    primary_expression         aller à l'état 31


État 94

    8 optimization1: FOR '(' IDENTIFIER $@4 '=' assignment_expression ';' IDENTIFIER comp_op . shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER '[' IDENTIFIER ']' assignment_operator optimization1_1 ';' '}'

    CONST_INT    décalage et aller à l'état 12
    CONST_FLOAT  décalage et aller à l'état 13
    IDENTIFIER   décalage et aller à l'état 14
    '('          décalage et aller à l'état 15
    INC          décalage et aller à l'état 16
    DEC          décalage et aller à l'état 17

    postfix_expression         aller à l'état 18
    unary_expression           aller à l'état 71
    multiplicative_expression  aller à l'état 20
    additive_expression        aller à l'état 21
    shift_expression           aller à l'état 96
    primary_expression         aller à l'état 31


État 95

    6 optimization2: FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression . ';' IDENTIFIER INC ')' '{' FOR '(' IDENTIFIER $@2 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@3 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}' '}'
   36 shift_expression: shift_expression . LEFT_OP additive_expression
   37                 | shift_expression . RIGHT_OP additive_expression

    ';'       décalage et aller à l'état 97
    LEFT_OP   décalage et aller à l'état 48
    RIGHT_OP  décalage et aller à l'état 49


État 96

    8 optimization1: FOR '(' IDENTIFIER $@4 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression . ';' IDENTIFIER INC ')' '{' IDENTIFIER '[' IDENTIFIER ']' assignment_operator optimization1_1 ';' '}'
   36 shift_expression: shift_expression . LEFT_OP additive_expression
   37                 | shift_expression . RIGHT_OP additive_expression

    ';'       décalage et aller à l'état 98
    LEFT_OP   décalage et aller à l'état 48
    RIGHT_OP  décalage et aller à l'état 49


État 97

    6 optimization2: FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' . IDENTIFIER INC ')' '{' FOR '(' IDENTIFIER $@2 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@3 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}' '}'

    IDENTIFIER  décalage et aller à l'état 99


État 98

    8 optimization1: FOR '(' IDENTIFIER $@4 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' . IDENTIFIER INC ')' '{' IDENTIFIER '[' IDENTIFIER ']' assignment_operator optimization1_1 ';' '}'

    IDENTIFIER  décalage et aller à l'état 100


État 99

    6 optimization2: FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER . INC ')' '{' FOR '(' IDENTIFIER $@2 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@3 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}' '}'

    INC  décalage et aller à l'état 101


État 100

    8 optimization1: FOR '(' IDENTIFIER $@4 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER . INC ')' '{' IDENTIFIER '[' IDENTIFIER ']' assignment_operator optimization1_1 ';' '}'

    INC  décalage et aller à l'état 102


État 101

    6 optimization2: FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC . ')' '{' FOR '(' IDENTIFIER $@2 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@3 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}' '}'

    ')'  décalage et aller à l'état 103


État 102

    8 optimization1: FOR '(' IDENTIFIER $@4 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC . ')' '{' IDENTIFIER '[' IDENTIFIER ']' assignment_operator optimization1_1 ';' '}'

    ')'  décalage et aller à l'état 104


État 103

    6 optimization2: FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' . '{' FOR '(' IDENTIFIER $@2 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@3 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}' '}'

    '{'  décalage et aller à l'état 105


État 104

    8 optimization1: FOR '(' IDENTIFIER $@4 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' . '{' IDENTIFIER '[' IDENTIFIER ']' assignment_operator optimization1_1 ';' '}'

    '{'  décalage et aller à l'état 106


État 105

    6 optimization2: FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' . FOR '(' IDENTIFIER $@2 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@3 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}' '}'

    FOR  décalage et aller à l'état 107


État 106

    8 optimization1: FOR '(' IDENTIFIER $@4 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' . IDENTIFIER '[' IDENTIFIER ']' assignment_operator optimization1_1 ';' '}'

    IDENTIFIER  décalage et aller à l'état 108


État 107

    6 optimization2: FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' FOR . '(' IDENTIFIER $@2 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@3 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}' '}'

    '('  décalage et aller à l'état 109


État 108

    8 optimization1: FOR '(' IDENTIFIER $@4 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER . '[' IDENTIFIER ']' assignment_operator optimization1_1 ';' '}'

    '['  décalage et aller à l'état 110


État 109

    6 optimization2: FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' FOR '(' . IDENTIFIER $@2 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@3 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}' '}'

    IDENTIFIER  décalage et aller à l'état 111


État 110

    8 optimization1: FOR '(' IDENTIFIER $@4 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER '[' . IDENTIFIER ']' assignment_operator optimization1_1 ';' '}'

    IDENTIFIER  décalage et aller à l'état 112


État 111

    6 optimization2: FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' FOR '(' IDENTIFIER . $@2 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@3 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}' '}'

    $défaut  réduction par utilisation de la règle 4 ($@2)

    $@2  aller à l'état 113


État 112

    8 optimization1: FOR '(' IDENTIFIER $@4 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER '[' IDENTIFIER . ']' assignment_operator optimization1_1 ';' '}'

    ']'  décalage et aller à l'état 114


État 113

    6 optimization2: FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' FOR '(' IDENTIFIER $@2 . '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@3 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}' '}'

    '='  décalage et aller à l'état 115


État 114

    8 optimization1: FOR '(' IDENTIFIER $@4 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER '[' IDENTIFIER ']' . assignment_operator optimization1_1 ';' '}'

    '='  décalage et aller à l'état 41

    assignment_operator  aller à l'état 116


État 115

    6 optimization2: FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' FOR '(' IDENTIFIER $@2 '=' . assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@3 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}' '}'

    CONST_INT    décalage et aller à l'état 12
    CONST_FLOAT  décalage et aller à l'état 13
    IDENTIFIER   décalage et aller à l'état 14
    '('          décalage et aller à l'état 15
    INC          décalage et aller à l'état 16
    DEC          décalage et aller à l'état 17

    postfix_expression         aller à l'état 18
    unary_expression           aller à l'état 19
    multiplicative_expression  aller à l'état 20
    additive_expression        aller à l'état 21
    shift_expression           aller à l'état 22
    relational_expression      aller à l'état 23
    equality_expression        aller à l'état 24
    and_expression             aller à l'état 25
    exclusive_or_expression    aller à l'état 26
    inclusive_or_expression    aller à l'état 27
    logical_and_expression     aller à l'état 28
    logical_or_expression      aller à l'état 29
    assignment_expression      aller à l'état 117
    primary_expression         aller à l'état 31


État 116

    8 optimization1: FOR '(' IDENTIFIER $@4 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER '[' IDENTIFIER ']' assignment_operator . optimization1_1 ';' '}'

    CONST_INT    décalage et aller à l'état 12
    CONST_FLOAT  décalage et aller à l'état 13
    IDENTIFIER   décalage et aller à l'état 118
    '('          décalage et aller à l'état 15
    INC          décalage et aller à l'état 16
    DEC          décalage et aller à l'état 17

    optimization1_1            aller à l'état 119
    postfix_expression         aller à l'état 18
    unary_expression           aller à l'état 19
    multiplicative_expression  aller à l'état 20
    additive_expression        aller à l'état 21
    shift_expression           aller à l'état 22
    relational_expression      aller à l'état 23
    equality_expression        aller à l'état 24
    and_expression             aller à l'état 25
    exclusive_or_expression    aller à l'état 26
    inclusive_or_expression    aller à l'état 27
    logical_and_expression     aller à l'état 28
    logical_or_expression      aller à l'état 29
    assignment_expression      aller à l'état 120
    primary_expression         aller à l'état 121


État 117

    6 optimization2: FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' FOR '(' IDENTIFIER $@2 '=' assignment_expression . ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@3 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}' '}'

    ';'  décalage et aller à l'état 122


État 118

   11 optimization1_1: IDENTIFIER . '[' IDENTIFIER ']' '*' primary_expression
   12                | IDENTIFIER . '[' IDENTIFIER ']'
   59 primary_expression: IDENTIFIER .

    '['  décalage et aller à l'état 123

    '['       [réduction par utilisation de la règle 59 (primary_expression)]
    $défaut  réduction par utilisation de la règle 59 (primary_expression)


État 119

    8 optimization1: FOR '(' IDENTIFIER $@4 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER '[' IDENTIFIER ']' assignment_operator optimization1_1 . ';' '}'
   14 optimization1_1: optimization1_1 . '+' optimization1_1

    ';'  décalage et aller à l'état 124
    '+'  décalage et aller à l'état 125


État 120

   15 optimization1_1: assignment_expression .

    $défaut  réduction par utilisation de la règle 15 (optimization1_1)


État 121

   13 optimization1_1: primary_expression . '*' IDENTIFIER '[' IDENTIFIER ']'
   20 postfix_expression: primary_expression .

    '*'  décalage et aller à l'état 126

    '*'       [réduction par utilisation de la règle 20 (postfix_expression)]
    $défaut  réduction par utilisation de la règle 20 (postfix_expression)


État 122

    6 optimization2: FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' FOR '(' IDENTIFIER $@2 '=' assignment_expression ';' . IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@3 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}' '}'

    IDENTIFIER  décalage et aller à l'état 127


État 123

   11 optimization1_1: IDENTIFIER '[' . IDENTIFIER ']' '*' primary_expression
   12                | IDENTIFIER '[' . IDENTIFIER ']'

    IDENTIFIER  décalage et aller à l'état 128


État 124

    8 optimization1: FOR '(' IDENTIFIER $@4 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER '[' IDENTIFIER ']' assignment_operator optimization1_1 ';' . '}'

    '}'  décalage et aller à l'état 129


État 125

   14 optimization1_1: optimization1_1 '+' . optimization1_1

    CONST_INT    décalage et aller à l'état 12
    CONST_FLOAT  décalage et aller à l'état 13
    IDENTIFIER   décalage et aller à l'état 118
    '('          décalage et aller à l'état 15
    INC          décalage et aller à l'état 16
    DEC          décalage et aller à l'état 17

    optimization1_1            aller à l'état 130
    postfix_expression         aller à l'état 18
    unary_expression           aller à l'état 19
    multiplicative_expression  aller à l'état 20
    additive_expression        aller à l'état 21
    shift_expression           aller à l'état 22
    relational_expression      aller à l'état 23
    equality_expression        aller à l'état 24
    and_expression             aller à l'état 25
    exclusive_or_expression    aller à l'état 26
    inclusive_or_expression    aller à l'état 27
    logical_and_expression     aller à l'état 28
    logical_or_expression      aller à l'état 29
    assignment_expression      aller à l'état 120
    primary_expression         aller à l'état 121


État 126

   13 optimization1_1: primary_expression '*' . IDENTIFIER '[' IDENTIFIER ']'

    IDENTIFIER  décalage et aller à l'état 131


État 127

    6 optimization2: FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' FOR '(' IDENTIFIER $@2 '=' assignment_expression ';' IDENTIFIER . comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@3 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}' '}'

    '<'    décalage et aller à l'état 91
    LE_OP  décalage et aller à l'état 92

    comp_op  aller à l'état 132


État 128

   11 optimization1_1: IDENTIFIER '[' IDENTIFIER . ']' '*' primary_expression
   12                | IDENTIFIER '[' IDENTIFIER . ']'

    ']'  décalage et aller à l'état 133


État 129

    8 optimization1: FOR '(' IDENTIFIER $@4 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER '[' IDENTIFIER ']' assignment_operator optimization1_1 ';' '}' .

    $défaut  réduction par utilisation de la règle 8 (optimization1)


État 130

   14 optimization1_1: optimization1_1 . '+' optimization1_1
   14                | optimization1_1 '+' optimization1_1 .

    '+'  décalage et aller à l'état 125

    '+'       [réduction par utilisation de la règle 14 (optimization1_1)]
    $défaut  réduction par utilisation de la règle 14 (optimization1_1)


État 131

   13 optimization1_1: primary_expression '*' IDENTIFIER . '[' IDENTIFIER ']'

    '['  décalage et aller à l'état 134


État 132

    6 optimization2: FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' FOR '(' IDENTIFIER $@2 '=' assignment_expression ';' IDENTIFIER comp_op . shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@3 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}' '}'

    CONST_INT    décalage et aller à l'état 12
    CONST_FLOAT  décalage et aller à l'état 13
    IDENTIFIER   décalage et aller à l'état 14
    '('          décalage et aller à l'état 15
    INC          décalage et aller à l'état 16
    DEC          décalage et aller à l'état 17

    postfix_expression         aller à l'état 18
    unary_expression           aller à l'état 71
    multiplicative_expression  aller à l'état 20
    additive_expression        aller à l'état 21
    shift_expression           aller à l'état 135
    primary_expression         aller à l'état 31


État 133

   11 optimization1_1: IDENTIFIER '[' IDENTIFIER ']' . '*' primary_expression
   12                | IDENTIFIER '[' IDENTIFIER ']' .

    '*'  décalage et aller à l'état 136

    $défaut  réduction par utilisation de la règle 12 (optimization1_1)


État 134

   13 optimization1_1: primary_expression '*' IDENTIFIER '[' . IDENTIFIER ']'

    IDENTIFIER  décalage et aller à l'état 137


État 135

    6 optimization2: FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' FOR '(' IDENTIFIER $@2 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression . ';' IDENTIFIER INC ')' '{' IDENTIFIER $@3 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}' '}'
   36 shift_expression: shift_expression . LEFT_OP additive_expression
   37                 | shift_expression . RIGHT_OP additive_expression

    ';'       décalage et aller à l'état 138
    LEFT_OP   décalage et aller à l'état 48
    RIGHT_OP  décalage et aller à l'état 49


État 136

   11 optimization1_1: IDENTIFIER '[' IDENTIFIER ']' '*' . primary_expression

    CONST_INT    décalage et aller à l'état 12
    CONST_FLOAT  décalage et aller à l'état 13
    IDENTIFIER   décalage et aller à l'état 14
    '('          décalage et aller à l'état 15

    primary_expression  aller à l'état 139


État 137

   13 optimization1_1: primary_expression '*' IDENTIFIER '[' IDENTIFIER . ']'

    ']'  décalage et aller à l'état 140


État 138

    6 optimization2: FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' FOR '(' IDENTIFIER $@2 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' . IDENTIFIER INC ')' '{' IDENTIFIER $@3 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}' '}'

    IDENTIFIER  décalage et aller à l'état 141


État 139

   11 optimization1_1: IDENTIFIER '[' IDENTIFIER ']' '*' primary_expression .

    $défaut  réduction par utilisation de la règle 11 (optimization1_1)


État 140

   13 optimization1_1: primary_expression '*' IDENTIFIER '[' IDENTIFIER ']' .

    $défaut  réduction par utilisation de la règle 13 (optimization1_1)


État 141

    6 optimization2: FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' FOR '(' IDENTIFIER $@2 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER . INC ')' '{' IDENTIFIER $@3 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}' '}'

    INC  décalage et aller à l'état 142


État 142

    6 optimization2: FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' FOR '(' IDENTIFIER $@2 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC . ')' '{' IDENTIFIER $@3 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}' '}'

    ')'  décalage et aller à l'état 143


État 143

    6 optimization2: FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' FOR '(' IDENTIFIER $@2 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' . '{' IDENTIFIER $@3 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}' '}'

    '{'  décalage et aller à l'état 144


État 144

    6 optimization2: FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' FOR '(' IDENTIFIER $@2 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' . IDENTIFIER $@3 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}' '}'

    IDENTIFIER  décalage et aller à l'état 145


État 145

    6 optimization2: FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' FOR '(' IDENTIFIER $@2 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER . $@3 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}' '}'

    $défaut  réduction par utilisation de la règle 5 ($@3)

    $@3  aller à l'état 146


État 146

    6 optimization2: FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' FOR '(' IDENTIFIER $@2 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@3 . '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}' '}'

    '['  décalage et aller à l'état 147


État 147

    6 optimization2: FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' FOR '(' IDENTIFIER $@2 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@3 '[' . IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}' '}'

    IDENTIFIER  décalage et aller à l'état 148


État 148

    6 optimization2: FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' FOR '(' IDENTIFIER $@2 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@3 '[' IDENTIFIER . ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}' '}'

    ']'  décalage et aller à l'état 149


État 149

    6 optimization2: FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' FOR '(' IDENTIFIER $@2 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@3 '[' IDENTIFIER ']' . '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}' '}'

    '['  décalage et aller à l'état 150


État 150

    6 optimization2: FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' FOR '(' IDENTIFIER $@2 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@3 '[' IDENTIFIER ']' '[' . IDENTIFIER ']' assignment_operator optimization2_1 ';' '}' '}'

    IDENTIFIER  décalage et aller à l'état 151


État 151

    6 optimization2: FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' FOR '(' IDENTIFIER $@2 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@3 '[' IDENTIFIER ']' '[' IDENTIFIER . ']' assignment_operator optimization2_1 ';' '}' '}'

    ']'  décalage et aller à l'état 152


État 152

    6 optimization2: FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' FOR '(' IDENTIFIER $@2 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@3 '[' IDENTIFIER ']' '[' IDENTIFIER ']' . assignment_operator optimization2_1 ';' '}' '}'

    '='  décalage et aller à l'état 41

    assignment_operator  aller à l'état 153


État 153

    6 optimization2: FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' FOR '(' IDENTIFIER $@2 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@3 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator . optimization2_1 ';' '}' '}'

    IDENTIFIER  décalage et aller à l'état 154

    optimization2_1  aller à l'état 155


État 154

    9 optimization2_1: IDENTIFIER . '[' IDENTIFIER ']' '[' IDENTIFIER ']'
   10                | IDENTIFIER . '[' IDENTIFIER ']' '[' IDENTIFIER ']' '*' primary_expression

    '['  décalage et aller à l'état 156


État 155

    6 optimization2: FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' FOR '(' IDENTIFIER $@2 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@3 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 . ';' '}' '}'

    ';'  décalage et aller à l'état 157


État 156

    9 optimization2_1: IDENTIFIER '[' . IDENTIFIER ']' '[' IDENTIFIER ']'
   10                | IDENTIFIER '[' . IDENTIFIER ']' '[' IDENTIFIER ']' '*' primary_expression

    IDENTIFIER  décalage et aller à l'état 158


État 157

    6 optimization2: FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' FOR '(' IDENTIFIER $@2 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@3 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' . '}' '}'

    '}'  décalage et aller à l'état 159


État 158

    9 optimization2_1: IDENTIFIER '[' IDENTIFIER . ']' '[' IDENTIFIER ']'
   10                | IDENTIFIER '[' IDENTIFIER . ']' '[' IDENTIFIER ']' '*' primary_expression

    ']'  décalage et aller à l'état 160


État 159

    6 optimization2: FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' FOR '(' IDENTIFIER $@2 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@3 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}' . '}'

    '}'  décalage et aller à l'état 161


État 160

    9 optimization2_1: IDENTIFIER '[' IDENTIFIER ']' . '[' IDENTIFIER ']'
   10                | IDENTIFIER '[' IDENTIFIER ']' . '[' IDENTIFIER ']' '*' primary_expression

    '['  décalage et aller à l'état 162


État 161

    6 optimization2: FOR '(' IDENTIFIER $@1 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' FOR '(' IDENTIFIER $@2 '=' assignment_expression ';' IDENTIFIER comp_op shift_expression ';' IDENTIFIER INC ')' '{' IDENTIFIER $@3 '[' IDENTIFIER ']' '[' IDENTIFIER ']' assignment_operator optimization2_1 ';' '}' '}' .

    $défaut  réduction par utilisation de la règle 6 (optimization2)


État 162

    9 optimization2_1: IDENTIFIER '[' IDENTIFIER ']' '[' . IDENTIFIER ']'
   10                | IDENTIFIER '[' IDENTIFIER ']' '[' . IDENTIFIER ']' '*' primary_expression

    IDENTIFIER  décalage et aller à l'état 163


État 163

    9 optimization2_1: IDENTIFIER '[' IDENTIFIER ']' '[' IDENTIFIER . ']'
   10                | IDENTIFIER '[' IDENTIFIER ']' '[' IDENTIFIER . ']' '*' primary_expression

    ']'  décalage et aller à l'état 164


État 164

    9 optimization2_1: IDENTIFIER '[' IDENTIFIER ']' '[' IDENTIFIER ']' .
   10                | IDENTIFIER '[' IDENTIFIER ']' '[' IDENTIFIER ']' . '*' primary_expression

    '*'  décalage et aller à l'état 165

    $défaut  réduction par utilisation de la règle 9 (optimization2_1)


État 165

   10 optimization2_1: IDENTIFIER '[' IDENTIFIER ']' '[' IDENTIFIER ']' '*' . primary_expression

    CONST_INT    décalage et aller à l'état 12
    CONST_FLOAT  décalage et aller à l'état 13
    IDENTIFIER   décalage et aller à l'état 14
    '('          décalage et aller à l'état 15

    primary_expression  aller à l'état 166


État 166

   10 optimization2_1: IDENTIFIER '[' IDENTIFIER ']' '[' IDENTIFIER ']' '*' primary_expression .

    $défaut  réduction par utilisation de la règle 10 (optimization2_1)
